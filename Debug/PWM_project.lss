
PWM_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001a9c  00001b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008a  0080008a  00001b5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f30  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c14  00000000  00000000  00005cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000206d  00000000  00000000  00006904  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00008974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097d  00000000  00000000  00008e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b6  00000000  00000000  000097b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000ba6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
       4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      54:	97 00       	.word	0x0097	; ????
      56:	a1 00       	.word	0x00a1	; ????
      58:	ab 00       	.word	0x00ab	; ????
      5a:	b5 00       	.word	0x00b5	; ????
      5c:	bf 00       	.word	0x00bf	; ????
      5e:	c9 00       	.word	0x00c9	; ????
      60:	d3 00       	.word	0x00d3	; ????
      62:	dd 00       	.word	0x00dd	; ????
      64:	fd 00       	.word	0x00fd	; ????
      66:	0d 01       	movw	r0, r26
      68:	1d 01       	movw	r2, r26
      6a:	2d 01       	movw	r4, r26
      6c:	3d 01       	movw	r6, r26
      6e:	4d 01       	movw	r8, r26
      70:	5d 01       	movw	r10, r26
      72:	6d 01       	movw	r12, r26
      74:	b2 04       	cpc	r11, r2
      76:	a4 04       	cpc	r10, r4
      78:	a6 04       	cpc	r10, r6
      7a:	a8 04       	cpc	r10, r8
      7c:	aa 04       	cpc	r10, r10
      7e:	ac 04       	cpc	r10, r12
      80:	ae 04       	cpc	r10, r14
      82:	b0 04       	cpc	r11, r0
      84:	cd 04       	cpc	r12, r13
      86:	bf 04       	cpc	r11, r15
      88:	c1 04       	cpc	r12, r1
      8a:	c3 04       	cpc	r12, r3
      8c:	c5 04       	cpc	r12, r5
      8e:	c7 04       	cpc	r12, r7
      90:	c9 04       	cpc	r12, r9
      92:	cb 04       	cpc	r12, r11
      94:	e8 04       	cpc	r14, r8
      96:	e8 04       	cpc	r14, r8
      98:	da 04       	cpc	r13, r10
      9a:	dc 04       	cpc	r13, r12
      9c:	de 04       	cpc	r13, r14
      9e:	e0 04       	cpc	r14, r0
      a0:	e2 04       	cpc	r14, r2
      a2:	e4 04       	cpc	r14, r4
      a4:	e6 04       	cpc	r14, r6

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf e5       	ldi	r28, 0x5F	; 95
      ac:	d8 e0       	ldi	r29, 0x08	; 8
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	10 e0       	ldi	r17, 0x00	; 0
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	ec e9       	ldi	r30, 0x9C	; 156
      ba:	fa e1       	ldi	r31, 0x1A	; 26
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	aa 38       	cpi	r26, 0x8A	; 138
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
      c8:	20 e0       	ldi	r18, 0x00	; 0
      ca:	aa e8       	ldi	r26, 0x8A	; 138
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	ac 38       	cpi	r26, 0x8C	; 140
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <main>
      dc:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <_exit>

000000e0 <__bad_interrupt>:
      e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <ADC_Initialization>:
#include "ADC_Private.h"

void ADC_Initialization(ADC_Vref vref, ADC_Prescaler prescaler)
{
	// Choose voltage reference
	switch(vref)
      e4:	81 30       	cpi	r24, 0x01	; 1
      e6:	59 f0       	breq	.+22     	; 0xfe <ADC_Initialization+0x1a>
      e8:	18 f0       	brcs	.+6      	; 0xf0 <ADC_Initialization+0xc>
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	79 f0       	breq	.+30     	; 0x10c <ADC_Initialization+0x28>
      ee:	14 c0       	rjmp	.+40     	; 0x118 <ADC_Initialization+0x34>
	{
		case AREF:
		CLR_BIT(ADMUX, REFS1);CLR_BIT(ADMUX, REFS0);
      f0:	87 b1       	in	r24, 0x07	; 7
      f2:	8f 77       	andi	r24, 0x7F	; 127
      f4:	87 b9       	out	0x07, r24	; 7
      f6:	87 b1       	in	r24, 0x07	; 7
      f8:	8f 7b       	andi	r24, 0xBF	; 191
      fa:	87 b9       	out	0x07, r24	; 7
		break;
      fc:	0d c0       	rjmp	.+26     	; 0x118 <ADC_Initialization+0x34>
		case AVCC:
		CLR_BIT(ADMUX, REFS1);SET_BIT(ADMUX, REFS0);
      fe:	87 b1       	in	r24, 0x07	; 7
     100:	8f 77       	andi	r24, 0x7F	; 127
     102:	87 b9       	out	0x07, r24	; 7
     104:	87 b1       	in	r24, 0x07	; 7
     106:	80 64       	ori	r24, 0x40	; 64
     108:	87 b9       	out	0x07, r24	; 7
		break;
     10a:	06 c0       	rjmp	.+12     	; 0x118 <ADC_Initialization+0x34>
		case INTERNAL:
		SET_BIT(ADMUX, REFS1);SET_BIT(ADMUX, REFS0);
     10c:	87 b1       	in	r24, 0x07	; 7
     10e:	80 68       	ori	r24, 0x80	; 128
     110:	87 b9       	out	0x07, r24	; 7
     112:	87 b1       	in	r24, 0x07	; 7
     114:	80 64       	ori	r24, 0x40	; 64
     116:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// Choose prescaler
	switch (prescaler)
     118:	86 2f       	mov	r24, r22
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	88 30       	cpi	r24, 0x08	; 8
     11e:	91 05       	cpc	r25, r1
     120:	08 f0       	brcs	.+2      	; 0x124 <ADC_Initialization+0x40>
     122:	54 c0       	rjmp	.+168    	; 0x1cc <ADC_Initialization+0xe8>
     124:	fc 01       	movw	r30, r24
     126:	e6 5d       	subi	r30, 0xD6	; 214
     128:	ff 4f       	sbci	r31, 0xFF	; 255
     12a:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__tablejump2__>
	{
		case ADC_PRE1:
		CLR_BIT(ADCSRA, ADPS2);CLR_BIT(ADCSRA, ADPS1);CLR_BIT(ADCSRA, ADPS0);
     12e:	86 b1       	in	r24, 0x06	; 6
     130:	8b 7f       	andi	r24, 0xFB	; 251
     132:	86 b9       	out	0x06, r24	; 6
     134:	86 b1       	in	r24, 0x06	; 6
     136:	8d 7f       	andi	r24, 0xFD	; 253
     138:	86 b9       	out	0x06, r24	; 6
     13a:	86 b1       	in	r24, 0x06	; 6
     13c:	8e 7f       	andi	r24, 0xFE	; 254
     13e:	86 b9       	out	0x06, r24	; 6
		break;
     140:	45 c0       	rjmp	.+138    	; 0x1cc <ADC_Initialization+0xe8>
		case ADC_PRE2:
		CLR_BIT(ADCSRA, ADPS2);CLR_BIT(ADCSRA, ADPS1);SET_BIT(ADCSRA, ADPS0);
     142:	86 b1       	in	r24, 0x06	; 6
     144:	8b 7f       	andi	r24, 0xFB	; 251
     146:	86 b9       	out	0x06, r24	; 6
     148:	86 b1       	in	r24, 0x06	; 6
     14a:	8d 7f       	andi	r24, 0xFD	; 253
     14c:	86 b9       	out	0x06, r24	; 6
     14e:	86 b1       	in	r24, 0x06	; 6
     150:	81 60       	ori	r24, 0x01	; 1
     152:	86 b9       	out	0x06, r24	; 6
		break;
     154:	3b c0       	rjmp	.+118    	; 0x1cc <ADC_Initialization+0xe8>
		case ADC_PRE4:
		CLR_BIT(ADCSRA, ADPS2);SET_BIT(ADCSRA, ADPS1);CLR_BIT(ADCSRA, ADPS0);
     156:	86 b1       	in	r24, 0x06	; 6
     158:	8b 7f       	andi	r24, 0xFB	; 251
     15a:	86 b9       	out	0x06, r24	; 6
     15c:	86 b1       	in	r24, 0x06	; 6
     15e:	82 60       	ori	r24, 0x02	; 2
     160:	86 b9       	out	0x06, r24	; 6
     162:	86 b1       	in	r24, 0x06	; 6
     164:	8e 7f       	andi	r24, 0xFE	; 254
     166:	86 b9       	out	0x06, r24	; 6
		break;
     168:	31 c0       	rjmp	.+98     	; 0x1cc <ADC_Initialization+0xe8>
		case ADC_PRE8:
		CLR_BIT(ADCSRA, ADPS2);SET_BIT(ADCSRA, ADPS1);SET_BIT(ADCSRA, ADPS0);
     16a:	86 b1       	in	r24, 0x06	; 6
     16c:	8b 7f       	andi	r24, 0xFB	; 251
     16e:	86 b9       	out	0x06, r24	; 6
     170:	86 b1       	in	r24, 0x06	; 6
     172:	82 60       	ori	r24, 0x02	; 2
     174:	86 b9       	out	0x06, r24	; 6
     176:	86 b1       	in	r24, 0x06	; 6
     178:	81 60       	ori	r24, 0x01	; 1
     17a:	86 b9       	out	0x06, r24	; 6
		break;
     17c:	27 c0       	rjmp	.+78     	; 0x1cc <ADC_Initialization+0xe8>
		case ADC_PRE16:
		SET_BIT(ADCSRA, ADPS2);CLR_BIT(ADCSRA, ADPS1);CLR_BIT(ADCSRA, ADPS0);
     17e:	86 b1       	in	r24, 0x06	; 6
     180:	84 60       	ori	r24, 0x04	; 4
     182:	86 b9       	out	0x06, r24	; 6
     184:	86 b1       	in	r24, 0x06	; 6
     186:	8d 7f       	andi	r24, 0xFD	; 253
     188:	86 b9       	out	0x06, r24	; 6
     18a:	86 b1       	in	r24, 0x06	; 6
     18c:	8e 7f       	andi	r24, 0xFE	; 254
     18e:	86 b9       	out	0x06, r24	; 6
		break;
     190:	1d c0       	rjmp	.+58     	; 0x1cc <ADC_Initialization+0xe8>
		case ADC_PRE32:
		SET_BIT(ADCSRA, ADPS2);CLR_BIT(ADCSRA, ADPS1);SET_BIT(ADCSRA, ADPS0);
     192:	86 b1       	in	r24, 0x06	; 6
     194:	84 60       	ori	r24, 0x04	; 4
     196:	86 b9       	out	0x06, r24	; 6
     198:	86 b1       	in	r24, 0x06	; 6
     19a:	8d 7f       	andi	r24, 0xFD	; 253
     19c:	86 b9       	out	0x06, r24	; 6
     19e:	86 b1       	in	r24, 0x06	; 6
     1a0:	81 60       	ori	r24, 0x01	; 1
     1a2:	86 b9       	out	0x06, r24	; 6
		break;
     1a4:	13 c0       	rjmp	.+38     	; 0x1cc <ADC_Initialization+0xe8>
		case ADC_PRE64:
		SET_BIT(ADCSRA, ADPS2);SET_BIT(ADCSRA, ADPS1);CLR_BIT(ADCSRA, ADPS0);
     1a6:	86 b1       	in	r24, 0x06	; 6
     1a8:	84 60       	ori	r24, 0x04	; 4
     1aa:	86 b9       	out	0x06, r24	; 6
     1ac:	86 b1       	in	r24, 0x06	; 6
     1ae:	82 60       	ori	r24, 0x02	; 2
     1b0:	86 b9       	out	0x06, r24	; 6
     1b2:	86 b1       	in	r24, 0x06	; 6
     1b4:	8e 7f       	andi	r24, 0xFE	; 254
     1b6:	86 b9       	out	0x06, r24	; 6
		break;
     1b8:	09 c0       	rjmp	.+18     	; 0x1cc <ADC_Initialization+0xe8>
		case ADC_PRE128:
		SET_BIT(ADCSRA, ADPS2);SET_BIT(ADCSRA, ADPS1);SET_BIT(ADCSRA, ADPS0);
     1ba:	86 b1       	in	r24, 0x06	; 6
     1bc:	84 60       	ori	r24, 0x04	; 4
     1be:	86 b9       	out	0x06, r24	; 6
     1c0:	86 b1       	in	r24, 0x06	; 6
     1c2:	82 60       	ori	r24, 0x02	; 2
     1c4:	86 b9       	out	0x06, r24	; 6
     1c6:	86 b1       	in	r24, 0x06	; 6
     1c8:	81 60       	ori	r24, 0x01	; 1
     1ca:	86 b9       	out	0x06, r24	; 6
		break;
	}
	// ADC Enable
	SET_BIT(ADCSRA, ADEN);
     1cc:	86 b1       	in	r24, 0x06	; 6
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	86 b9       	out	0x06, r24	; 6
	// ADC interrupt disable
	CLR_BIT(ADCSRA, ADIE);
     1d2:	86 b1       	in	r24, 0x06	; 6
     1d4:	87 7f       	andi	r24, 0xF7	; 247
     1d6:	86 b9       	out	0x06, r24	; 6
	// ADC auto trigger enable
	SET_BIT(ADCSRA, ADATE);
     1d8:	86 b1       	in	r24, 0x06	; 6
     1da:	80 62       	ori	r24, 0x20	; 32
     1dc:	86 b9       	out	0x06, r24	; 6
	// ADC Right adjust
	CLR_BIT(ADMUX, ADLAR);
     1de:	87 b1       	in	r24, 0x07	; 7
     1e0:	8f 7d       	andi	r24, 0xDF	; 223
     1e2:	87 b9       	out	0x07, r24	; 7
     1e4:	08 95       	ret

000001e6 <ADC_Read>:
}
uint16_t ADC_Read(ADC_Channel channel)
{
	uint16_t reading = 0;
	// Choose channel
	switch (channel)
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	88 30       	cpi	r24, 0x08	; 8
     1ea:	91 05       	cpc	r25, r1
     1ec:	08 f0       	brcs	.+2      	; 0x1f0 <ADC_Read+0xa>
     1ee:	84 c0       	rjmp	.+264    	; 0x2f8 <ADC_Read+0x112>
     1f0:	fc 01       	movw	r30, r24
     1f2:	ee 5c       	subi	r30, 0xCE	; 206
     1f4:	ff 4f       	sbci	r31, 0xFF	; 255
     1f6:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__tablejump2__>
	{
		case ADC_CH0:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);CLR_BIT(ADMUX, MUX0);// 0 0 0 0 0
     1fa:	87 b1       	in	r24, 0x07	; 7
     1fc:	8f 7e       	andi	r24, 0xEF	; 239
     1fe:	87 b9       	out	0x07, r24	; 7
     200:	87 b1       	in	r24, 0x07	; 7
     202:	87 7f       	andi	r24, 0xF7	; 247
     204:	87 b9       	out	0x07, r24	; 7
     206:	87 b1       	in	r24, 0x07	; 7
     208:	8b 7f       	andi	r24, 0xFB	; 251
     20a:	87 b9       	out	0x07, r24	; 7
     20c:	87 b1       	in	r24, 0x07	; 7
     20e:	8d 7f       	andi	r24, 0xFD	; 253
     210:	87 b9       	out	0x07, r24	; 7
     212:	87 b1       	in	r24, 0x07	; 7
     214:	8e 7f       	andi	r24, 0xFE	; 254
     216:	87 b9       	out	0x07, r24	; 7
		break;
     218:	6f c0       	rjmp	.+222    	; 0x2f8 <ADC_Read+0x112>
		case ADC_CH1:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);SET_BIT(ADMUX, MUX0);// 0 0 0 0 1
     21a:	87 b1       	in	r24, 0x07	; 7
     21c:	8f 7e       	andi	r24, 0xEF	; 239
     21e:	87 b9       	out	0x07, r24	; 7
     220:	87 b1       	in	r24, 0x07	; 7
     222:	87 7f       	andi	r24, 0xF7	; 247
     224:	87 b9       	out	0x07, r24	; 7
     226:	87 b1       	in	r24, 0x07	; 7
     228:	8b 7f       	andi	r24, 0xFB	; 251
     22a:	87 b9       	out	0x07, r24	; 7
     22c:	87 b1       	in	r24, 0x07	; 7
     22e:	8d 7f       	andi	r24, 0xFD	; 253
     230:	87 b9       	out	0x07, r24	; 7
     232:	87 b1       	in	r24, 0x07	; 7
     234:	81 60       	ori	r24, 0x01	; 1
     236:	87 b9       	out	0x07, r24	; 7
		break;
     238:	5f c0       	rjmp	.+190    	; 0x2f8 <ADC_Read+0x112>
		case ADC_CH2:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);SET_BIT(ADMUX, MUX1);CLR_BIT(ADMUX, MUX0);// 0 0 0 1 0
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	8f 7e       	andi	r24, 0xEF	; 239
     23e:	87 b9       	out	0x07, r24	; 7
     240:	87 b1       	in	r24, 0x07	; 7
     242:	87 7f       	andi	r24, 0xF7	; 247
     244:	87 b9       	out	0x07, r24	; 7
     246:	87 b1       	in	r24, 0x07	; 7
     248:	8b 7f       	andi	r24, 0xFB	; 251
     24a:	87 b9       	out	0x07, r24	; 7
     24c:	87 b1       	in	r24, 0x07	; 7
     24e:	82 60       	ori	r24, 0x02	; 2
     250:	87 b9       	out	0x07, r24	; 7
     252:	87 b1       	in	r24, 0x07	; 7
     254:	8e 7f       	andi	r24, 0xFE	; 254
     256:	87 b9       	out	0x07, r24	; 7
		break;
     258:	4f c0       	rjmp	.+158    	; 0x2f8 <ADC_Read+0x112>
		case ADC_CH3:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);CLR_BIT(ADMUX, MUX2);SET_BIT(ADMUX, MUX1);SET_BIT(ADMUX, MUX0);// 0 0 0 1 1
     25a:	87 b1       	in	r24, 0x07	; 7
     25c:	8f 7e       	andi	r24, 0xEF	; 239
     25e:	87 b9       	out	0x07, r24	; 7
     260:	87 b1       	in	r24, 0x07	; 7
     262:	87 7f       	andi	r24, 0xF7	; 247
     264:	87 b9       	out	0x07, r24	; 7
     266:	87 b1       	in	r24, 0x07	; 7
     268:	8b 7f       	andi	r24, 0xFB	; 251
     26a:	87 b9       	out	0x07, r24	; 7
     26c:	87 b1       	in	r24, 0x07	; 7
     26e:	82 60       	ori	r24, 0x02	; 2
     270:	87 b9       	out	0x07, r24	; 7
     272:	87 b1       	in	r24, 0x07	; 7
     274:	81 60       	ori	r24, 0x01	; 1
     276:	87 b9       	out	0x07, r24	; 7
		break;
     278:	3f c0       	rjmp	.+126    	; 0x2f8 <ADC_Read+0x112>
		case ADC_CH4:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);SET_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);CLR_BIT(ADMUX, MUX0);// 0 0 1 0 0
     27a:	87 b1       	in	r24, 0x07	; 7
     27c:	8f 7e       	andi	r24, 0xEF	; 239
     27e:	87 b9       	out	0x07, r24	; 7
     280:	87 b1       	in	r24, 0x07	; 7
     282:	87 7f       	andi	r24, 0xF7	; 247
     284:	87 b9       	out	0x07, r24	; 7
     286:	87 b1       	in	r24, 0x07	; 7
     288:	84 60       	ori	r24, 0x04	; 4
     28a:	87 b9       	out	0x07, r24	; 7
     28c:	87 b1       	in	r24, 0x07	; 7
     28e:	8d 7f       	andi	r24, 0xFD	; 253
     290:	87 b9       	out	0x07, r24	; 7
     292:	87 b1       	in	r24, 0x07	; 7
     294:	8e 7f       	andi	r24, 0xFE	; 254
     296:	87 b9       	out	0x07, r24	; 7
		break;
     298:	2f c0       	rjmp	.+94     	; 0x2f8 <ADC_Read+0x112>
		case ADC_CH5:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);SET_BIT(ADMUX, MUX2);CLR_BIT(ADMUX, MUX1);SET_BIT(ADMUX, MUX0);// 0 0 1 0 1
     29a:	87 b1       	in	r24, 0x07	; 7
     29c:	8f 7e       	andi	r24, 0xEF	; 239
     29e:	87 b9       	out	0x07, r24	; 7
     2a0:	87 b1       	in	r24, 0x07	; 7
     2a2:	87 7f       	andi	r24, 0xF7	; 247
     2a4:	87 b9       	out	0x07, r24	; 7
     2a6:	87 b1       	in	r24, 0x07	; 7
     2a8:	84 60       	ori	r24, 0x04	; 4
     2aa:	87 b9       	out	0x07, r24	; 7
     2ac:	87 b1       	in	r24, 0x07	; 7
     2ae:	8d 7f       	andi	r24, 0xFD	; 253
     2b0:	87 b9       	out	0x07, r24	; 7
     2b2:	87 b1       	in	r24, 0x07	; 7
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	87 b9       	out	0x07, r24	; 7
		break;
     2b8:	1f c0       	rjmp	.+62     	; 0x2f8 <ADC_Read+0x112>
		case ADC_CH6:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);SET_BIT(ADMUX, MUX2);SET_BIT(ADMUX, MUX1);CLR_BIT(ADMUX, MUX0);// 0 0 1 1 0
     2ba:	87 b1       	in	r24, 0x07	; 7
     2bc:	8f 7e       	andi	r24, 0xEF	; 239
     2be:	87 b9       	out	0x07, r24	; 7
     2c0:	87 b1       	in	r24, 0x07	; 7
     2c2:	87 7f       	andi	r24, 0xF7	; 247
     2c4:	87 b9       	out	0x07, r24	; 7
     2c6:	87 b1       	in	r24, 0x07	; 7
     2c8:	84 60       	ori	r24, 0x04	; 4
     2ca:	87 b9       	out	0x07, r24	; 7
     2cc:	87 b1       	in	r24, 0x07	; 7
     2ce:	82 60       	ori	r24, 0x02	; 2
     2d0:	87 b9       	out	0x07, r24	; 7
     2d2:	87 b1       	in	r24, 0x07	; 7
     2d4:	8e 7f       	andi	r24, 0xFE	; 254
     2d6:	87 b9       	out	0x07, r24	; 7
		break;
     2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <ADC_Read+0x112>
		case ADC_CH7:
		CLR_BIT(ADMUX, MUX4);CLR_BIT(ADMUX, MUX3);SET_BIT(ADMUX, MUX2);SET_BIT(ADMUX, MUX1);SET_BIT(ADMUX, MUX0);// 0 0 1 1 1
     2da:	87 b1       	in	r24, 0x07	; 7
     2dc:	8f 7e       	andi	r24, 0xEF	; 239
     2de:	87 b9       	out	0x07, r24	; 7
     2e0:	87 b1       	in	r24, 0x07	; 7
     2e2:	87 7f       	andi	r24, 0xF7	; 247
     2e4:	87 b9       	out	0x07, r24	; 7
     2e6:	87 b1       	in	r24, 0x07	; 7
     2e8:	84 60       	ori	r24, 0x04	; 4
     2ea:	87 b9       	out	0x07, r24	; 7
     2ec:	87 b1       	in	r24, 0x07	; 7
     2ee:	82 60       	ori	r24, 0x02	; 2
     2f0:	87 b9       	out	0x07, r24	; 7
     2f2:	87 b1       	in	r24, 0x07	; 7
     2f4:	81 60       	ori	r24, 0x01	; 1
     2f6:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// ADC Start conversion
	SET_BIT(ADCSRA, ADSC);
     2f8:	86 b1       	in	r24, 0x06	; 6
     2fa:	80 64       	ori	r24, 0x40	; 64
     2fc:	86 b9       	out	0x06, r24	; 6
	// wait until conversion finish
	while (GET_BIT(ADCSRA, ADIF) != 1);
     2fe:	34 9b       	sbis	0x06, 4	; 6
     300:	fe cf       	rjmp	.-4      	; 0x2fe <ADC_Read+0x118>
	reading = ADC_DT;
     302:	84 b1       	in	r24, 0x04	; 4
     304:	95 b1       	in	r25, 0x05	; 5
	return reading;
     306:	08 95       	ret

00000308 <DIO_SetPin_Direction>:

#include "DIO_Private.h"

void DIO_SetPin_Direction(DIO_Ports port, DIO_Pins pin, DIO_Status status)
{
	switch(status)
     308:	44 23       	and	r20, r20
     30a:	19 f0       	breq	.+6      	; 0x312 <DIO_SetPin_Direction+0xa>
     30c:	41 30       	cpi	r20, 0x01	; 1
     30e:	c9 f1       	breq	.+114    	; 0x382 <DIO_SetPin_Direction+0x7a>
     310:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	91 f0       	breq	.+36     	; 0x33a <DIO_SetPin_Direction+0x32>
     316:	28 f0       	brcs	.+10     	; 0x322 <DIO_SetPin_Direction+0x1a>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	d9 f0       	breq	.+54     	; 0x352 <DIO_SetPin_Direction+0x4a>
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	29 f1       	breq	.+74     	; 0x36a <DIO_SetPin_Direction+0x62>
     320:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
     322:	2a b3       	in	r18, 0x1a	; 26
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_SetPin_Direction+0x26>
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	6a 95       	dec	r22
     330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_SetPin_Direction+0x22>
     332:	80 95       	com	r24
     334:	82 23       	and	r24, r18
     336:	8a bb       	out	0x1a, r24	; 26
			break;
     338:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
     33a:	27 b3       	in	r18, 0x17	; 23
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPin_Direction+0x3e>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	6a 95       	dec	r22
     348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPin_Direction+0x3a>
     34a:	80 95       	com	r24
     34c:	82 23       	and	r24, r18
     34e:	87 bb       	out	0x17, r24	; 23
			break;
     350:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
     352:	24 b3       	in	r18, 0x14	; 20
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_SetPin_Direction+0x56>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	6a 95       	dec	r22
     360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_SetPin_Direction+0x52>
     362:	80 95       	com	r24
     364:	82 23       	and	r24, r18
     366:	84 bb       	out	0x14, r24	; 20
			break;
     368:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
     36a:	21 b3       	in	r18, 0x11	; 17
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_SetPin_Direction+0x6e>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	6a 95       	dec	r22
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_SetPin_Direction+0x6a>
     37a:	80 95       	com	r24
     37c:	82 23       	and	r24, r18
     37e:	81 bb       	out	0x11, r24	; 17
			break;
     380:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	89 f0       	breq	.+34     	; 0x3a8 <DIO_SetPin_Direction+0xa0>
     386:	28 f0       	brcs	.+10     	; 0x392 <DIO_SetPin_Direction+0x8a>
     388:	82 30       	cpi	r24, 0x02	; 2
     38a:	c9 f0       	breq	.+50     	; 0x3be <DIO_SetPin_Direction+0xb6>
     38c:	83 30       	cpi	r24, 0x03	; 3
     38e:	11 f1       	breq	.+68     	; 0x3d4 <DIO_SetPin_Direction+0xcc>
     390:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
     392:	2a b3       	in	r18, 0x1a	; 26
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPin_Direction+0x96>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPin_Direction+0x92>
     3a2:	82 2b       	or	r24, r18
     3a4:	8a bb       	out	0x1a, r24	; 26
			break;
     3a6:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
     3a8:	27 b3       	in	r18, 0x17	; 23
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_SetPin_Direction+0xac>
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	6a 95       	dec	r22
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_SetPin_Direction+0xa8>
     3b8:	82 2b       	or	r24, r18
     3ba:	87 bb       	out	0x17, r24	; 23
			break;
     3bc:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
     3be:	24 b3       	in	r18, 0x14	; 20
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPin_Direction+0xc2>
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	6a 95       	dec	r22
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPin_Direction+0xbe>
     3ce:	82 2b       	or	r24, r18
     3d0:	84 bb       	out	0x14, r24	; 20
			break;
     3d2:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
     3d4:	21 b3       	in	r18, 0x11	; 17
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPin_Direction+0xd8>
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	6a 95       	dec	r22
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPin_Direction+0xd4>
     3e4:	82 2b       	or	r24, r18
     3e6:	81 bb       	out	0x11, r24	; 17
     3e8:	08 95       	ret

000003ea <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(DIO_Ports port, DIO_Pins pin, DIO_State state)
{
	switch(state)
     3ea:	44 23       	and	r20, r20
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <DIO_SetPin_Value+0xa>
     3ee:	41 30       	cpi	r20, 0x01	; 1
     3f0:	c9 f1       	breq	.+114    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     3f2:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	91 f0       	breq	.+36     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     3f8:	28 f0       	brcs	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3fa:	82 30       	cpi	r24, 0x02	; 2
     3fc:	d9 f0       	breq	.+54     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     3fe:	83 30       	cpi	r24, 0x03	; 3
     400:	29 f1       	breq	.+74     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     402:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
     404:	2b b3       	in	r18, 0x1b	; 27
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	6a 95       	dec	r22
     412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     414:	80 95       	com	r24
     416:	82 23       	and	r24, r18
     418:	8b bb       	out	0x1b, r24	; 27
			break;
     41a:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
     41c:	28 b3       	in	r18, 0x18	; 24
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	6a 95       	dec	r22
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     42c:	80 95       	com	r24
     42e:	82 23       	and	r24, r18
     430:	88 bb       	out	0x18, r24	; 24
			break;
     432:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
     434:	25 b3       	in	r18, 0x15	; 21
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	6a 95       	dec	r22
     442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     444:	80 95       	com	r24
     446:	82 23       	and	r24, r18
     448:	85 bb       	out	0x15, r24	; 21
			break;
     44a:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
     44c:	22 b3       	in	r18, 0x12	; 18
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	02 c0       	rjmp	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	6a 95       	dec	r22
     45a:	e2 f7       	brpl	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     45c:	80 95       	com	r24
     45e:	82 23       	and	r24, r18
     460:	82 bb       	out	0x12, r24	; 18
			break;
     462:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	89 f0       	breq	.+34     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     468:	28 f0       	brcs	.+10     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	c9 f0       	breq	.+50     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     46e:	83 30       	cpi	r24, 0x03	; 3
     470:	11 f1       	breq	.+68     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     472:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
     474:	2b b3       	in	r18, 0x1b	; 27
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	6a 95       	dec	r22
     482:	e2 f7       	brpl	.-8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     484:	82 2b       	or	r24, r18
     486:	8b bb       	out	0x1b, r24	; 27
			break;
     488:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
     48a:	28 b3       	in	r18, 0x18	; 24
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	6a 95       	dec	r22
     498:	e2 f7       	brpl	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     49a:	82 2b       	or	r24, r18
     49c:	88 bb       	out	0x18, r24	; 24
			break;
     49e:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
     4a0:	25 b3       	in	r18, 0x15	; 21
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	6a 95       	dec	r22
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	82 2b       	or	r24, r18
     4b2:	85 bb       	out	0x15, r24	; 21
			break;
     4b4:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
     4b6:	22 b3       	in	r18, 0x12	; 18
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	6a 95       	dec	r22
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4c6:	82 2b       	or	r24, r18
     4c8:	82 bb       	out	0x12, r24	; 18
     4ca:	08 95       	ret

000004cc <FAST_PWM_intialization>:

#include "FAST_PWM_Private.h"


void FAST_PWM_intialization(FAST_Prescaler prescaler){
	SET_BIT(TCCR0,WGM01); SET_BIT(TCCR0,WGM00);// CHoose mode as fast pwm
     4cc:	93 b7       	in	r25, 0x33	; 51
     4ce:	98 60       	ori	r25, 0x08	; 8
     4d0:	93 bf       	out	0x33, r25	; 51
     4d2:	93 b7       	in	r25, 0x33	; 51
     4d4:	90 64       	ori	r25, 0x40	; 64
     4d6:	93 bf       	out	0x33, r25	; 51
	SET_BIT(DDRB,3);   //set pin output PORT B BIN 3
     4d8:	97 b3       	in	r25, 0x17	; 23
     4da:	98 60       	ori	r25, 0x08	; 8
     4dc:	97 bb       	out	0x17, r25	; 23
	switch(prescaler)
     4de:	82 30       	cpi	r24, 0x02	; 2
     4e0:	01 f1       	breq	.+64     	; 0x522 <FAST_PWM_intialization+0x56>
     4e2:	28 f4       	brcc	.+10     	; 0x4ee <FAST_PWM_intialization+0x22>
     4e4:	88 23       	and	r24, r24
     4e6:	49 f0       	breq	.+18     	; 0x4fa <FAST_PWM_intialization+0x2e>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	89 f0       	breq	.+34     	; 0x50e <FAST_PWM_intialization+0x42>
     4ec:	08 95       	ret
     4ee:	84 30       	cpi	r24, 0x04	; 4
     4f0:	61 f1       	breq	.+88     	; 0x54a <FAST_PWM_intialization+0x7e>
     4f2:	08 f1       	brcs	.+66     	; 0x536 <FAST_PWM_intialization+0x6a>
     4f4:	85 30       	cpi	r24, 0x05	; 5
     4f6:	99 f1       	breq	.+102    	; 0x55e <FAST_PWM_intialization+0x92>
     4f8:	08 95       	ret
	{
		case FAST_No_clock_source:
		CLR_BIT(TCCR0,CS02); CLR_BIT(TCCR0,CS01); CLR_BIT(TCCR0,CS00);
     4fa:	83 b7       	in	r24, 0x33	; 51
     4fc:	8b 7f       	andi	r24, 0xFB	; 251
     4fe:	83 bf       	out	0x33, r24	; 51
     500:	83 b7       	in	r24, 0x33	; 51
     502:	8d 7f       	andi	r24, 0xFD	; 253
     504:	83 bf       	out	0x33, r24	; 51
     506:	83 b7       	in	r24, 0x33	; 51
     508:	8e 7f       	andi	r24, 0xFE	; 254
     50a:	83 bf       	out	0x33, r24	; 51
		break;
     50c:	08 95       	ret
		case FAST_No_prescaling:
		CLR_BIT(TCCR0,CS02); CLR_BIT(TCCR0,CS01); SET_BIT(TCCR0,CS00);
     50e:	83 b7       	in	r24, 0x33	; 51
     510:	8b 7f       	andi	r24, 0xFB	; 251
     512:	83 bf       	out	0x33, r24	; 51
     514:	83 b7       	in	r24, 0x33	; 51
     516:	8d 7f       	andi	r24, 0xFD	; 253
     518:	83 bf       	out	0x33, r24	; 51
     51a:	83 b7       	in	r24, 0x33	; 51
     51c:	81 60       	ori	r24, 0x01	; 1
     51e:	83 bf       	out	0x33, r24	; 51
		break;
     520:	08 95       	ret
		case FAST_From_prescaler8:
		CLR_BIT(TCCR0,CS02); SET_BIT(TCCR0,CS01); CLR_BIT(TCCR0,CS00);
     522:	83 b7       	in	r24, 0x33	; 51
     524:	8b 7f       	andi	r24, 0xFB	; 251
     526:	83 bf       	out	0x33, r24	; 51
     528:	83 b7       	in	r24, 0x33	; 51
     52a:	82 60       	ori	r24, 0x02	; 2
     52c:	83 bf       	out	0x33, r24	; 51
     52e:	83 b7       	in	r24, 0x33	; 51
     530:	8e 7f       	andi	r24, 0xFE	; 254
     532:	83 bf       	out	0x33, r24	; 51
		break;
     534:	08 95       	ret
		case FAST_From_prescaler64:
		CLR_BIT(TCCR0,CS02); SET_BIT(TCCR0,CS01); SET_BIT(TCCR0,CS00);
     536:	83 b7       	in	r24, 0x33	; 51
     538:	8b 7f       	andi	r24, 0xFB	; 251
     53a:	83 bf       	out	0x33, r24	; 51
     53c:	83 b7       	in	r24, 0x33	; 51
     53e:	82 60       	ori	r24, 0x02	; 2
     540:	83 bf       	out	0x33, r24	; 51
     542:	83 b7       	in	r24, 0x33	; 51
     544:	81 60       	ori	r24, 0x01	; 1
     546:	83 bf       	out	0x33, r24	; 51
		break;
     548:	08 95       	ret
		case FAST_From_prescaler256:
		SET_BIT(TCCR0,CS02); CLR_BIT(TCCR0,CS01); CLR_BIT(TCCR0,CS00);
     54a:	83 b7       	in	r24, 0x33	; 51
     54c:	84 60       	ori	r24, 0x04	; 4
     54e:	83 bf       	out	0x33, r24	; 51
     550:	83 b7       	in	r24, 0x33	; 51
     552:	8d 7f       	andi	r24, 0xFD	; 253
     554:	83 bf       	out	0x33, r24	; 51
     556:	83 b7       	in	r24, 0x33	; 51
     558:	8e 7f       	andi	r24, 0xFE	; 254
     55a:	83 bf       	out	0x33, r24	; 51
		break;
     55c:	08 95       	ret
		case FAST_From_prescaler1024:
		SET_BIT(TCCR0,CS02); CLR_BIT(TCCR0,CS01); SET_BIT(TCCR0,CS00);
     55e:	83 b7       	in	r24, 0x33	; 51
     560:	84 60       	ori	r24, 0x04	; 4
     562:	83 bf       	out	0x33, r24	; 51
     564:	83 b7       	in	r24, 0x33	; 51
     566:	8d 7f       	andi	r24, 0xFD	; 253
     568:	83 bf       	out	0x33, r24	; 51
     56a:	83 b7       	in	r24, 0x33	; 51
     56c:	81 60       	ori	r24, 0x01	; 1
     56e:	83 bf       	out	0x33, r24	; 51
     570:	08 95       	ret

00000572 <LCD_Write_Command>:
		Loc_Row1 += column;
		LCD_Write_Command(Loc_Row1);
		break;
		default:
		Loc_Row0 += column;
		LCD_Write_Command(Loc_Row0);
     572:	cf 93       	push	r28
     574:	c8 2f       	mov	r28, r24
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	62 e0       	ldi	r22, 0x02	; 2
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	67 e0       	ldi	r22, 0x07	; 7
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     594:	8c 2f       	mov	r24, r28
     596:	80 7f       	andi	r24, 0xF0	; 240
     598:	8b bb       	out	0x1b, r24	; 27
     59a:	cf 70       	andi	r28, 0x0F	; 15
     59c:	cc 0f       	add	r28, r28
     59e:	cc 0f       	add	r28, r28
     5a0:	cc 0f       	add	r28, r28
     5a2:	c5 bb       	out	0x15, r28	; 21
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	67 e0       	ldi	r22, 0x07	; 7
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     5ae:	8f e9       	ldi	r24, 0x9F	; 159
     5b0:	9f e0       	ldi	r25, 0x0F	; 15
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_Write_Command+0x40>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_Write_Command+0x46>
     5b8:	00 00       	nop
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	67 e0       	ldi	r22, 0x07	; 7
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <LCD_Initialize>:
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	62 e0       	ldi	r22, 0x02	; 2
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	67 e0       	ldi	r22, 0x07	; 7
     5e0:	83 e0       	ldi	r24, 0x03	; 3
     5e2:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	64 e0       	ldi	r22, 0x04	; 4
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	65 e0       	ldi	r22, 0x05	; 5
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	63 e0       	ldi	r22, 0x03	; 3
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     604:	41 e0       	ldi	r20, 0x01	; 1
     606:	64 e0       	ldi	r22, 0x04	; 4
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	65 e0       	ldi	r22, 0x05	; 5
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     618:	41 e0       	ldi	r20, 0x01	; 1
     61a:	66 e0       	ldi	r22, 0x06	; 6
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	64 e0       	ldi	r22, 0x04	; 4
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     62c:	41 e0       	ldi	r20, 0x01	; 1
     62e:	65 e0       	ldi	r22, 0x05	; 5
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	66 e0       	ldi	r22, 0x06	; 6
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	67 e0       	ldi	r22, 0x07	; 7
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	64 e0       	ldi	r22, 0x04	; 4
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     654:	2f ef       	ldi	r18, 0xFF	; 255
     656:	83 ef       	ldi	r24, 0xF3	; 243
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	21 50       	subi	r18, 0x01	; 1
     65c:	80 40       	sbci	r24, 0x00	; 0
     65e:	90 40       	sbci	r25, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <LCD_Initialize+0x92>
     662:	00 c0       	rjmp	.+0      	; 0x664 <LCD_Initialize+0x9c>
     664:	00 00       	nop
     666:	41 e0       	ldi	r20, 0x01	; 1
     668:	64 e0       	ldi	r22, 0x04	; 4
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	65 e0       	ldi	r22, 0x05	; 5
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     67a:	83 e3       	ldi	r24, 0x33	; 51
     67c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
     680:	82 e3       	ldi	r24, 0x32	; 50
     682:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
     692:	8c e0       	ldi	r24, 0x0C	; 12
     694:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
     698:	86 e0       	ldi	r24, 0x06	; 6
     69a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
     69e:	08 95       	ret

000006a0 <LCD_Write_Character>:
     6a0:	cf 93       	push	r28
     6a2:	c8 2f       	mov	r28, r24
     6a4:	41 e0       	ldi	r20, 0x01	; 1
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	67 e0       	ldi	r22, 0x07	; 7
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     6c2:	8c 2f       	mov	r24, r28
     6c4:	80 7f       	andi	r24, 0xF0	; 240
     6c6:	8b bb       	out	0x1b, r24	; 27
     6c8:	cf 70       	andi	r28, 0x0F	; 15
     6ca:	cc 0f       	add	r28, r28
     6cc:	cc 0f       	add	r28, r28
     6ce:	cc 0f       	add	r28, r28
     6d0:	c5 bb       	out	0x15, r28	; 21
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	67 e0       	ldi	r22, 0x07	; 7
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     6dc:	8f e9       	ldi	r24, 0x9F	; 159
     6de:	9f e0       	ldi	r25, 0x0F	; 15
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCD_Write_Character+0x40>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_Write_Character+0x46>
     6e6:	00 00       	nop
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	67 e0       	ldi	r22, 0x07	; 7
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_SetPin_Value>
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <LCD_Write_string>:
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
     6fc:	09 c0       	rjmp	.+18     	; 0x710 <LCD_Write_string+0x1a>
     6fe:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     702:	8f e3       	ldi	r24, 0x3F	; 63
     704:	9c e9       	ldi	r25, 0x9C	; 156
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <LCD_Write_string+0x10>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <LCD_Write_string+0x16>
     70c:	00 00       	nop
     70e:	21 96       	adiw	r28, 0x01	; 1
     710:	88 81       	ld	r24, Y
     712:	81 11       	cpse	r24, r1
     714:	f4 cf       	rjmp	.-24     	; 0x6fe <LCD_Write_string+0x8>
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <LCD_Write_Number>:
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	2a 97       	sbiw	r28, 0x0a	; 10
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	2a e0       	ldi	r18, 0x0A	; 10
     732:	ae 01       	movw	r20, r28
     734:	4f 5f       	subi	r20, 0xFF	; 255
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__ltoa_ncheck>
     73c:	ce 01       	movw	r24, r28
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCD_Write_string>
     744:	2a 96       	adiw	r28, 0x0a	; 10
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <LCD_ClearScreen>:
		break;
	}
}
void LCD_ClearScreen(void)
{
	LCD_Write_Command(0x01);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
     75c:	08 95       	ret

0000075e <LED0_Initialize>:

void LED0_Initialize(void)
{
	//Define direction of LED0
	//SET_BIT(DDRC, LED0);
	DIO_SetPin_Direction(LED0_PRT, LED0, LED0_OUT);
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e 94 84 01 	call	0x308	; 0x308 <DIO_SetPin_Direction>
     768:	08 95       	ret

0000076a <fixed_vertival_lines>:
	uint16_t m3 = read2 - 48;
	LCD_forth_line(m3);
	LCD_eight_line (m3);
}

void fixed_vertival_lines(void){
     76a:	cf 93       	push	r28
	
	uint8_t y;
	
	for(y=0;y<16;y++){    //FIRST LINE VERTICAL
     76c:	c0 e0       	ldi	r28, 0x00	; 0
     76e:	0e c0       	rjmp	.+28     	; 0x78c <fixed_vertival_lines+0x22>
		LCD_Write_Command(0x80 | y);
     770:	8c 2f       	mov	r24, r28
     772:	80 68       	ori	r24, 0x80	; 128
     774:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Command(0x88 | 0);
     778:	88 e8       	ldi	r24, 0x88	; 136
     77a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Character(0b11000000);
     77e:	80 ec       	ldi	r24, 0xC0	; 192
     780:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		LCD_Write_Character(0x00);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>

void fixed_vertival_lines(void){
	
	uint8_t y;
	
	for(y=0;y<16;y++){    //FIRST LINE VERTICAL
     78a:	cf 5f       	subi	r28, 0xFF	; 255
     78c:	c0 31       	cpi	r28, 0x10	; 16
     78e:	80 f3       	brcs	.-32     	; 0x770 <fixed_vertival_lines+0x6>
     790:	c0 e0       	ldi	r28, 0x00	; 0
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <fixed_vertival_lines+0x46>
		LCD_Write_Character(0b11000000);
		LCD_Write_Character(0x00);
	}
	
	for(y=0;y<16;y++){    //FIRST LINE VERTICAL
		LCD_Write_Command(0x80 | y);
     794:	8c 2f       	mov	r24, r28
     796:	80 68       	ori	r24, 0x80	; 128
     798:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Command(0x88 | 4);
     79c:	8c e8       	ldi	r24, 0x8C	; 140
     79e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Character(0xC0);
     7a2:	80 ec       	ldi	r24, 0xC0	; 192
     7a4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		LCD_Write_Character(0x00);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		LCD_Write_Command(0x88 | 0);
		LCD_Write_Character(0b11000000);
		LCD_Write_Character(0x00);
	}
	
	for(y=0;y<16;y++){    //FIRST LINE VERTICAL
     7ae:	cf 5f       	subi	r28, 0xFF	; 255
     7b0:	c0 31       	cpi	r28, 0x10	; 16
     7b2:	80 f3       	brcs	.-32     	; 0x794 <fixed_vertival_lines+0x2a>
		LCD_Write_Command(0x80 | y);
		LCD_Write_Command(0x88 | 4);
		LCD_Write_Character(0xC0);
		LCD_Write_Character(0x00);
	}
}
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <pwm_for_led>:

void pwm_for_led(uint16_t read){
	
	SET_BIT(TCCR0,COM01) ; CLR_BIT(TCCR0,COM00);
     7b8:	23 b7       	in	r18, 0x33	; 51
     7ba:	20 62       	ori	r18, 0x20	; 32
     7bc:	23 bf       	out	0x33, r18	; 51
     7be:	23 b7       	in	r18, 0x33	; 51
     7c0:	2f 7e       	andi	r18, 0xEF	; 239
     7c2:	23 bf       	out	0x33, r18	; 51
	uint16_t op=read*(float)0.249;
     7c4:	bc 01       	movw	r22, r24
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__floatunsisf>
     7ce:	2b ed       	ldi	r18, 0xDB	; 219
     7d0:	39 ef       	ldi	r19, 0xF9	; 249
     7d2:	4e e7       	ldi	r20, 0x7E	; 126
     7d4:	5e e3       	ldi	r21, 0x3E	; 62
     7d6:	0e 94 98 0c 	call	0x1930	; 0x1930 <__mulsf3>
     7da:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fixunssfsi>
	OCR0= op;
     7de:	6c bf       	out	0x3c, r22	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e0:	8f e1       	ldi	r24, 0x1F	; 31
     7e2:	9e e4       	ldi	r25, 0x4E	; 78
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <pwm_for_led+0x2c>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <pwm_for_led+0x32>
     7ea:	00 00       	nop
     7ec:	08 95       	ret

000007ee <data_display>:
	_delay_ms(5);
}

void data_display(void){
	
	LCD_Write_Command(0x30);
     7ee:	80 e3       	ldi	r24, 0x30	; 48
     7f0:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
	
	LCD_Write_Command(0x80);
     7f4:	80 e8       	ldi	r24, 0x80	; 128
     7f6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
	LCD_Write_string("Frequency: ");
     7fa:	80 e6       	ldi	r24, 0x60	; 96
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCD_Write_string>
	
	LCD_Write_Command(0x85);
     802:	85 e8       	ldi	r24, 0x85	; 133
     804:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
	
	LCD_Write_string("61 Hz");
     808:	8c e6       	ldi	r24, 0x6C	; 108
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCD_Write_string>
	
	
	LCD_Write_Command(0x90);
     810:	80 e9       	ldi	r24, 0x90	; 144
     812:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
	LCD_Write_string("duty cycle: ");
     816:	82 e7       	ldi	r24, 0x72	; 114
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCD_Write_string>
	
	LCD_Write_Command(0x97);
     81e:	87 e9       	ldi	r24, 0x97	; 151
     820:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
	LCD_Write_string("%");
     824:	8f e7       	ldi	r24, 0x7F	; 127
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCD_Write_string>
	
	
	LCD_Write_Command(0x98);
     82c:	88 e9       	ldi	r24, 0x98	; 152
     82e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
	LCD_Write_string("< time >");
     832:	81 e8       	ldi	r24, 0x81	; 129
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCD_Write_string>
     83a:	08 95       	ret

0000083c <main_lines>:
}

void main_lines(void){
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29

	uint8_t x,y;

	for(x=2;(x>=2)&(x<4);x++){   //SECOND LINE HORIZONTAL
     840:	d2 e0       	ldi	r29, 0x02	; 2
     842:	14 c0       	rjmp	.+40     	; 0x86c <__stack+0xd>
		for(y=14;y<16;y++){
			LCD_Write_Command(0x80 | y);
     844:	8c 2f       	mov	r24, r28
     846:	80 68       	ori	r24, 0x80	; 128
     848:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | x);
     84c:	8d 2f       	mov	r24, r29
     84e:	88 68       	ori	r24, 0x88	; 136
     850:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Character(0xFF);
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			LCD_Write_Character(0xFF);
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
void main_lines(void){

	uint8_t x,y;

	for(x=2;(x>=2)&(x<4);x++){   //SECOND LINE HORIZONTAL
		for(y=14;y<16;y++){
     860:	cf 5f       	subi	r28, 0xFF	; 255
     862:	01 c0       	rjmp	.+2      	; 0x866 <__stack+0x7>
     864:	ce e0       	ldi	r28, 0x0E	; 14
     866:	c0 31       	cpi	r28, 0x10	; 16
     868:	68 f3       	brcs	.-38     	; 0x844 <main_lines+0x8>

void main_lines(void){

	uint8_t x,y;

	for(x=2;(x>=2)&(x<4);x++){   //SECOND LINE HORIZONTAL
     86a:	df 5f       	subi	r29, 0xFF	; 255
     86c:	8e ef       	ldi	r24, 0xFE	; 254
     86e:	8d 0f       	add	r24, r29
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	c0 f3       	brcs	.-16     	; 0x864 <__stack+0x5>
     874:	c0 e0       	ldi	r28, 0x00	; 0
     876:	0e c0       	rjmp	.+28     	; 0x894 <__stack+0x35>
		}

	}

	for(y=0;y<16;y++){  //THIRD LINE VERTICAL
		LCD_Write_Command(0x80 | y);
     878:	8c 2f       	mov	r24, r28
     87a:	80 68       	ori	r24, 0x80	; 128
     87c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Command(0x88 | 4);
     880:	8c e8       	ldi	r24, 0x8C	; 140
     882:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Character(0xC0);
     886:	80 ec       	ldi	r24, 0xC0	; 192
     888:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		LCD_Write_Character(0x00);
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			LCD_Write_Character(0xFF);
		}

	}

	for(y=0;y<16;y++){  //THIRD LINE VERTICAL
     892:	cf 5f       	subi	r28, 0xFF	; 255
     894:	c0 31       	cpi	r28, 0x10	; 16
     896:	80 f3       	brcs	.-32     	; 0x878 <__stack+0x19>
     898:	c0 e0       	ldi	r28, 0x00	; 0
     89a:	0e c0       	rjmp	.+28     	; 0x8b8 <__stack+0x59>
		LCD_Write_Character(0x00);
	}
	

	for(y=0;y<16;y++){     //FIFTH LINE VERTICAL
		LCD_Write_Command(0x80 | y);
     89c:	8c 2f       	mov	r24, r28
     89e:	80 68       	ori	r24, 0x80	; 128
     8a0:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Command(0x88 | 7);
     8a4:	8f e8       	ldi	r24, 0x8F	; 143
     8a6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		LCD_Write_Character(0x00);
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		LCD_Write_Character(0x03);
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		LCD_Write_Character(0xC0);
		LCD_Write_Character(0x00);
	}
	

	for(y=0;y<16;y++){     //FIFTH LINE VERTICAL
     8b6:	cf 5f       	subi	r28, 0xFF	; 255
     8b8:	c0 31       	cpi	r28, 0x10	; 16
     8ba:	80 f3       	brcs	.-32     	; 0x89c <__stack+0x3d>
     8bc:	d6 e0       	ldi	r29, 0x06	; 6
     8be:	14 c0       	rjmp	.+40     	; 0x8e8 <__stack+0x89>
		LCD_Write_Character(0x03);
	}
	
	for(x=6;(x>=6)&(x<8);x++){    //FORTH LINE HORIZONTAL
		for(y=14;y<16;y++){
			LCD_Write_Command(0x80 | y);
     8c0:	8c 2f       	mov	r24, r28
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | x);
     8c8:	8d 2f       	mov	r24, r29
     8ca:	88 68       	ori	r24, 0x88	; 136
     8cc:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Character(0xFF);
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			LCD_Write_Character(0xFF);
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		LCD_Write_Character(0x00);
		LCD_Write_Character(0x03);
	}
	
	for(x=6;(x>=6)&(x<8);x++){    //FORTH LINE HORIZONTAL
		for(y=14;y<16;y++){
     8dc:	cf 5f       	subi	r28, 0xFF	; 255
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <__stack+0x83>
     8e0:	ce e0       	ldi	r28, 0x0E	; 14
     8e2:	c0 31       	cpi	r28, 0x10	; 16
     8e4:	68 f3       	brcs	.-38     	; 0x8c0 <__stack+0x61>
		LCD_Write_Command(0x88 | 7);
		LCD_Write_Character(0x00);
		LCD_Write_Character(0x03);
	}
	
	for(x=6;(x>=6)&(x<8);x++){    //FORTH LINE HORIZONTAL
     8e6:	df 5f       	subi	r29, 0xFF	; 255
     8e8:	8a ef       	ldi	r24, 0xFA	; 250
     8ea:	8d 0f       	add	r24, r29
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	c0 f3       	brcs	.-16     	; 0x8e0 <__stack+0x81>
			LCD_Write_Character(0xFF);
			LCD_Write_Character(0xFF);
		}

	}
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <CLEAR_SCREEN>:

void CLEAR_SCREEN(void){
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29

	uint8_t x,y;

	for(x=0;x<32;x++){
     8fa:	d0 e0       	ldi	r29, 0x00	; 0
     8fc:	14 c0       	rjmp	.+40     	; 0x926 <CLEAR_SCREEN+0x30>
		for(y=0;y<32;y++){
			LCD_Write_Command(0x80 | y);
     8fe:	8c 2f       	mov	r24, r28
     900:	80 68       	ori	r24, 0x80	; 128
     902:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x80 | x);
     906:	8d 2f       	mov	r24, r29
     908:	80 68       	ori	r24, 0x80	; 128
     90a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Character(0x00);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			LCD_Write_Character(0x00);
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
void CLEAR_SCREEN(void){

	uint8_t x,y;

	for(x=0;x<32;x++){
		for(y=0;y<32;y++){
     91a:	cf 5f       	subi	r28, 0xFF	; 255
     91c:	01 c0       	rjmp	.+2      	; 0x920 <CLEAR_SCREEN+0x2a>
     91e:	c0 e0       	ldi	r28, 0x00	; 0
     920:	c0 32       	cpi	r28, 0x20	; 32
     922:	68 f3       	brcs	.-38     	; 0x8fe <CLEAR_SCREEN+0x8>

void CLEAR_SCREEN(void){

	uint8_t x,y;

	for(x=0;x<32;x++){
     924:	df 5f       	subi	r29, 0xFF	; 255
     926:	d0 32       	cpi	r29, 0x20	; 32
     928:	d0 f3       	brcs	.-12     	; 0x91e <CLEAR_SCREEN+0x28>
			LCD_Write_Command(0x80 | x);
			LCD_Write_Character(0x00);
			LCD_Write_Character(0x00);
		}}

	}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <decimal_shift>:

	uint8_t decimal_shift(uint8_t read){
		
		uint8_t bin=0b00000000;
		
		switch(read){
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	fc 01       	movw	r30, r24
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	e8 30       	cpi	r30, 0x08	; 8
     938:	f1 05       	cpc	r31, r1
     93a:	20 f4       	brcc	.+8      	; 0x944 <decimal_shift+0x14>
     93c:	e6 5c       	subi	r30, 0xC6	; 198
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__tablejump2__>

	}

	uint8_t decimal_shift(uint8_t read){
		
		uint8_t bin=0b00000000;
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	08 95       	ret
			case 1:
			bin=0b10000000;
			break;
			
			case 2:
			bin=0b11000000;
     948:	80 ec       	ldi	r24, 0xC0	; 192
			break;
     94a:	08 95       	ret
			
			case 3:
			bin=0b11100000;
     94c:	80 ee       	ldi	r24, 0xE0	; 224
			break;
     94e:	08 95       	ret
			
			case 4:
			bin=0b11110000;
     950:	80 ef       	ldi	r24, 0xF0	; 240
			break;
     952:	08 95       	ret
			
			case 5:
			bin=0b11111000;
     954:	88 ef       	ldi	r24, 0xF8	; 248
			break;
     956:	08 95       	ret
			
			case 6:
			bin=0b11111100;
     958:	8c ef       	ldi	r24, 0xFC	; 252
			break;
     95a:	08 95       	ret
			
			case 7:
			bin=0b11111110;
     95c:	8e ef       	ldi	r24, 0xFE	; 254
			break;
     95e:	08 95       	ret
			
			case 8:
			bin=0b11111111;
     960:	8f ef       	ldi	r24, 0xFF	; 255
			break;
     962:	08 95       	ret
			case 0:
			bin=0b00000000;
			break;
			
			case 1:
			bin=0b10000000;
     964:	80 e8       	ldi	r24, 0x80	; 128
			case 8:
			bin=0b11111111;
			break;
		}
		return bin;
	}
     966:	08 95       	ret

00000968 <decimal_shift_back>:

	uint8_t decimal_shift_back(uint8_t read8){
		
		uint8_t bin=0b00000000;
		
		switch(read8){
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	88 30       	cpi	r24, 0x08	; 8
     96c:	91 05       	cpc	r25, r1
     96e:	28 f4       	brcc	.+10     	; 0x97a <decimal_shift_back+0x12>
     970:	fc 01       	movw	r30, r24
     972:	ee 5b       	subi	r30, 0xBE	; 190
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__tablejump2__>
		return bin;
	}

	uint8_t decimal_shift_back(uint8_t read8){
		
		uint8_t bin=0b00000000;
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	08 95       	ret
			case 0:
			bin=0b11111111;
			break;
			
			case 1:
			bin=0b01111111;
     97e:	8f e7       	ldi	r24, 0x7F	; 127
			break;
     980:	08 95       	ret
			
			case 2:
			bin=0b00111111;
     982:	8f e3       	ldi	r24, 0x3F	; 63
			break;
     984:	08 95       	ret
			
			case 3:
			bin=0b00011111;
     986:	8f e1       	ldi	r24, 0x1F	; 31
			break;
     988:	08 95       	ret
			
			case 4:
			bin=0b00001111;
     98a:	8f e0       	ldi	r24, 0x0F	; 15
			break;
     98c:	08 95       	ret
			
			case 5:
			bin=0b00000111;
     98e:	87 e0       	ldi	r24, 0x07	; 7
			break;
     990:	08 95       	ret
			
			case 6:
			bin=0b00000011;
     992:	83 e0       	ldi	r24, 0x03	; 3
			break;
     994:	08 95       	ret
			
			case 7:
			bin=0b00000001;
     996:	81 e0       	ldi	r24, 0x01	; 1
			break;
     998:	08 95       	ret
		uint8_t bin=0b00000000;
		
		switch(read8){
			
			case 0:
			bin=0b11111111;
     99a:	8f ef       	ldi	r24, 0xFF	; 255
			case 8:
			bin=0b00000000;
			break;
		}
		return bin;
	}
     99c:	08 95       	ret

0000099e <decimal_shift_h>:

	uint8_t decimal_shift_h(uint8_t read){
		
		uint8_t bin=0b00000000;
		
		switch(read){
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	89 30       	cpi	r24, 0x09	; 9
     9a2:	91 05       	cpc	r25, r1
     9a4:	28 f4       	brcc	.+10     	; 0x9b0 <decimal_shift_h+0x12>
     9a6:	fc 01       	movw	r30, r24
     9a8:	e6 5b       	subi	r30, 0xB6	; 182
     9aa:	ff 4f       	sbci	r31, 0xFF	; 255
     9ac:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__tablejump2__>
		//read=0;
	}

	uint8_t decimal_shift_h(uint8_t read){
		
		uint8_t bin=0b00000000;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	08 95       	ret
			case 1:
			bin=0b11000000;
			break;
			
			case 2:
			bin=0b01100000;
     9b4:	80 e6       	ldi	r24, 0x60	; 96
			break;
     9b6:	08 95       	ret
			
			case 3:
			bin=0b00110000;
     9b8:	80 e3       	ldi	r24, 0x30	; 48
			break;
     9ba:	08 95       	ret
			
			case 4:
			bin=0b00011000;
     9bc:	88 e1       	ldi	r24, 0x18	; 24
			break;
     9be:	08 95       	ret
			
			case 5:
			bin=0b00001100;
     9c0:	8c e0       	ldi	r24, 0x0C	; 12
			break;
     9c2:	08 95       	ret
			
			case 6:
			bin=0b00000110;
     9c4:	86 e0       	ldi	r24, 0x06	; 6
			break;
     9c6:	08 95       	ret
			
			case 7:
			bin=0b00000011;
     9c8:	83 e0       	ldi	r24, 0x03	; 3
			break;
     9ca:	08 95       	ret
			
			case 8:
			bin=0b00000011;
     9cc:	83 e0       	ldi	r24, 0x03	; 3
			break;
     9ce:	08 95       	ret
		uint8_t bin=0b00000000;
		
		switch(read){
			
			case 0:
			bin=0b11000000;
     9d0:	80 ec       	ldi	r24, 0xC0	; 192
			case 8:
			bin=0b00000011;
			break;
		}
		return bin;
	}
     9d2:	08 95       	ret

000009d4 <LCD_first_line>:
			break;
		}
		return bin;
	}

	void LCD_first_line (uint16_t read4){
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	8c 01       	movw	r16, r24
		
		if(read4>16)
     9de:	41 97       	sbiw	r24, 0x11	; 17
     9e0:	10 f0       	brcs	.+4      	; 0x9e6 <LCD_first_line+0x12>
		read4=16;
     9e2:	00 e1       	ldi	r16, 0x10	; 16
     9e4:	10 e0       	ldi	r17, 0x00	; 0
		
		uint8_t y;
		LCD_Write_Command(0x36);
     9e6:	86 e3       	ldi	r24, 0x36	; 54
     9e8:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2<17){
     9ec:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     9f0:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     9f4:	41 97       	sbiw	r24, 0x11	; 17
     9f6:	08 f1       	brcs	.+66     	; 0xa3a <LCD_first_line+0x66>
     9f8:	35 c0       	rjmp	.+106    	; 0xa64 <LCD_first_line+0x90>
			for(y=0;y<16;y++){                                 //first LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     9fa:	8c 2f       	mov	r24, r28
     9fc:	80 68       	ori	r24, 0x80	; 128
     9fe:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 0);
     a02:	88 e8       	ldi	r24, 0x88	; 136
     a04:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read4>7){
     a08:	08 30       	cpi	r16, 0x08	; 8
     a0a:	11 05       	cpc	r17, r1
     a0c:	60 f0       	brcs	.+24     	; 0xa26 <LCD_first_line+0x52>
					
					uint8_t d5 =read4-8;
					uint8_t d6 = decimal_shift_h(d5);
     a0e:	88 ef       	ldi	r24, 0xF8	; 248
     a10:	80 0f       	add	r24, r16
     a12:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
     a16:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
     a1e:	8d 2f       	mov	r24, r29
     a20:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <LCD_first_line+0x62>
					
				}
				else{
					uint8_t d7 = decimal_shift_h(read4);
     a26:	80 2f       	mov	r24, r16
     a28:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
     a2c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		read4=16;
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2<17){
			for(y=0;y<16;y++){                                 //first LINE VERTICAL
     a36:	cf 5f       	subi	r28, 0xFF	; 255
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <LCD_first_line+0x68>
     a3a:	c0 e0       	ldi	r28, 0x00	; 0
     a3c:	c0 31       	cpi	r28, 0x10	; 16
     a3e:	e8 f2       	brcs	.-70     	; 0x9fa <LCD_first_line+0x26>
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	0e c0       	rjmp	.+28     	; 0xa60 <LCD_first_line+0x8c>
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){                                //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     a44:	8c 2f       	mov	r24, r28
     a46:	80 68       	ori	r24, 0x80	; 128
     a48:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 1);
     a4c:	89 e8       	ldi	r24, 0x89	; 137
     a4e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d7);
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){                                //SECOND LINE VERTICAL
     a5e:	cf 5f       	subi	r28, 0xFF	; 255
     a60:	c0 31       	cpi	r28, 0x10	; 16
     a62:	80 f3       	brcs	.-32     	; 0xa44 <LCD_first_line+0x70>
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	1c c0       	rjmp	.+56     	; 0xaa0 <LCD_first_line+0xcc>
			}
		}

		for(y=0;y<2;y++){      //FIRST LINE HORIZONTAL
			
			LCD_Write_Command(0x80 | y);
     a68:	8c 2f       	mov	r24, r28
     a6a:	80 68       	ori	r24, 0x80	; 128
     a6c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 0);
     a70:	88 e8       	ldi	r24, 0x88	; 136
     a72:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read4>7){
     a76:	08 30       	cpi	r16, 0x08	; 8
     a78:	11 05       	cpc	r17, r1
     a7a:	60 f0       	brcs	.+24     	; 0xa94 <LCD_first_line+0xc0>
				uint8_t d1 =read4-8;
				uint8_t d2 = decimal_shift(d1);
     a7c:	88 ef       	ldi	r24, 0xF8	; 248
     a7e:	80 0f       	add	r24, r16
     a80:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
     a84:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
     a8c:	8d 2f       	mov	r24, r29
     a8e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <LCD_first_line+0xca>
			}
			else{
				uint8_t d3 = decimal_shift(read4);
     a94:	80 2f       	mov	r24, r16
     a96:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
     a9a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
			}
		}

		for(y=0;y<2;y++){      //FIRST LINE HORIZONTAL
     a9e:	cf 5f       	subi	r28, 0xFF	; 255
     aa0:	c2 30       	cpi	r28, 0x02	; 2
     aa2:	10 f3       	brcs	.-60     	; 0xa68 <LCD_first_line+0x94>
     aa4:	ce e0       	ldi	r28, 0x0E	; 14
     aa6:	1f c0       	rjmp	.+62     	; 0xae6 <LCD_first_line+0x112>
			}
		}
		
		//SECOND LINE HORIZONTAL
		for(y=14;y<16;y++){
			LCD_Write_Command(0x80 | y);
     aa8:	8c 2f       	mov	r24, r28
     aaa:	80 68       	ori	r24, 0x80	; 128
     aac:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 0);
     ab0:	88 e8       	ldi	r24, 0x88	; 136
     ab2:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read4>7){
     ab6:	08 30       	cpi	r16, 0x08	; 8
     ab8:	11 05       	cpc	r17, r1
     aba:	60 f0       	brcs	.+24     	; 0xad4 <LCD_first_line+0x100>
				uint8_t d8 =read4-8;
				uint8_t d9 = decimal_shift_back(d8);
     abc:	88 ef       	ldi	r24, 0xF8	; 248
     abe:	80 0f       	add	r24, r16
     ac0:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
     ac4:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
     acc:	8d 2f       	mov	r24, r29
     ace:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     ad2:	08 c0       	rjmp	.+16     	; 0xae4 <LCD_first_line+0x110>
			}
			else{
				uint8_t d10 = decimal_shift_back(read4);
     ad4:	80 2f       	mov	r24, r16
     ad6:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
     ada:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		//SECOND LINE HORIZONTAL
		for(y=14;y<16;y++){
     ae4:	cf 5f       	subi	r28, 0xFF	; 255
     ae6:	c0 31       	cpi	r28, 0x10	; 16
     ae8:	f8 f2       	brcs	.-66     	; 0xaa8 <LCD_first_line+0xd4>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<17){
     aea:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     aee:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     af2:	41 97       	sbiw	r24, 0x11	; 17
     af4:	80 f0       	brcs	.+32     	; 0xb16 <LCD_first_line+0x142>
     af6:	12 c0       	rjmp	.+36     	; 0xb1c <LCD_first_line+0x148>
			for(y=14;y<16;y++){
				LCD_Write_Command(0x80 | y);
     af8:	8c 2f       	mov	r24, r28
     afa:	80 68       	ori	r24, 0x80	; 128
     afc:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 1);
     b00:	89 e8       	ldi	r24, 0x89	; 137
     b02:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     b0c:	8f ef       	ldi	r24, 0xFF	; 255
     b0e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<17){
			for(y=14;y<16;y++){
     b12:	cf 5f       	subi	r28, 0xFF	; 255
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <LCD_first_line+0x144>
     b16:	ce e0       	ldi	r28, 0x0E	; 14
     b18:	c0 31       	cpi	r28, 0x10	; 16
     b1a:	70 f3       	brcs	.-36     	; 0xaf8 <LCD_first_line+0x124>
				LCD_Write_Command(0x88 | 1);
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		LCD_Write_Command(0x30);  //close graphical mode
     b1c:	80 e3       	ldi	r24, 0x30	; 48
     b1e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>

	}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	08 95       	ret

00000b2c <LCD_second_line>:

	void LCD_second_line (uint16_t read5){
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	8c 01       	movw	r16, r24
		
		if(read5>16)
     b36:	41 97       	sbiw	r24, 0x11	; 17
     b38:	10 f0       	brcs	.+4      	; 0xb3e <LCD_second_line+0x12>
		read5=16;
     b3a:	00 e1       	ldi	r16, 0x10	; 16
     b3c:	10 e0       	ldi	r17, 0x00	; 0
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
     b3e:	86 e3       	ldi	r24, 0x36	; 54
     b40:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2 < 33){
     b44:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     b48:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     b4c:	81 97       	sbiw	r24, 0x21	; 33
     b4e:	08 f1       	brcs	.+66     	; 0xb92 <LCD_second_line+0x66>
     b50:	35 c0       	rjmp	.+106    	; 0xbbc <LCD_second_line+0x90>
			for(y=0;y<16;y++){                      //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     b52:	8c 2f       	mov	r24, r28
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 1);
     b5a:	89 e8       	ldi	r24, 0x89	; 137
     b5c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read5>7){
     b60:	08 30       	cpi	r16, 0x08	; 8
     b62:	11 05       	cpc	r17, r1
     b64:	60 f0       	brcs	.+24     	; 0xb7e <LCD_second_line+0x52>
					
					uint8_t d5 =read5-8;
					uint8_t d6 = decimal_shift_h(d5);
     b66:	88 ef       	ldi	r24, 0xF8	; 248
     b68:	80 0f       	add	r24, r16
     b6a:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
     b6e:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
     b76:	8d 2f       	mov	r24, r29
     b78:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <LCD_second_line+0x62>
				}
				else{
					uint8_t d7 = decimal_shift_h(read5);
     b7e:	80 2f       	mov	r24, r16
     b80:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
     b84:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2 < 33){
			for(y=0;y<16;y++){                      //SECOND LINE VERTICAL
     b8e:	cf 5f       	subi	r28, 0xFF	; 255
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <LCD_second_line+0x68>
     b92:	c0 e0       	ldi	r28, 0x00	; 0
     b94:	c0 31       	cpi	r28, 0x10	; 16
     b96:	e8 f2       	brcs	.-70     	; 0xb52 <LCD_second_line+0x26>
     b98:	c0 e0       	ldi	r28, 0x00	; 0
     b9a:	0e c0       	rjmp	.+28     	; 0xbb8 <LCD_second_line+0x8c>
				}
			}
			

			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     b9c:	8c 2f       	mov	r24, r28
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 2);
     ba4:	8a e8       	ldi	r24, 0x8A	; 138
     ba6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
				}
			}
			

			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
     bb6:	cf 5f       	subi	r28, 0xFF	; 255
     bb8:	c0 31       	cpi	r28, 0x10	; 16
     bba:	80 f3       	brcs	.-32     	; 0xb9c <LCD_second_line+0x70>
     bbc:	c0 e0       	ldi	r28, 0x00	; 0
     bbe:	1c c0       	rjmp	.+56     	; 0xbf8 <LCD_second_line+0xcc>
			}
		}
		
		for(y=0;y<2;y++){           //second line horizontal
			
			LCD_Write_Command(0x80 | y);
     bc0:	8c 2f       	mov	r24, r28
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 1);
     bc8:	89 e8       	ldi	r24, 0x89	; 137
     bca:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
     bce:	08 30       	cpi	r16, 0x08	; 8
     bd0:	11 05       	cpc	r17, r1
     bd2:	60 f0       	brcs	.+24     	; 0xbec <LCD_second_line+0xc0>
				uint8_t d1 =read5-8;
				uint8_t d2 = decimal_shift(d1);
     bd4:	88 ef       	ldi	r24, 0xF8	; 248
     bd6:	80 0f       	add	r24, r16
     bd8:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
     bdc:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
     be4:	8d 2f       	mov	r24, r29
     be6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <LCD_second_line+0xca>
			}
			else{
				uint8_t d3 = decimal_shift(read5);
     bec:	80 2f       	mov	r24, r16
     bee:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
     bf2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
		}
		
		for(y=0;y<2;y++){           //second line horizontal
     bf6:	cf 5f       	subi	r28, 0xFF	; 255
     bf8:	c2 30       	cpi	r28, 0x02	; 2
     bfa:	10 f3       	brcs	.-60     	; 0xbc0 <LCD_second_line+0x94>
     bfc:	ce e0       	ldi	r28, 0x0E	; 14
     bfe:	1f c0       	rjmp	.+62     	; 0xc3e <LCD_second_line+0x112>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){                 //bottom line horizontal
			LCD_Write_Command(0x80 | y);
     c00:	8c 2f       	mov	r24, r28
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 1);
     c08:	89 e8       	ldi	r24, 0x89	; 137
     c0a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
     c0e:	08 30       	cpi	r16, 0x08	; 8
     c10:	11 05       	cpc	r17, r1
     c12:	60 f0       	brcs	.+24     	; 0xc2c <LCD_second_line+0x100>
				uint8_t d8 =read5-8;
				uint8_t d9 = decimal_shift_back(d8);
     c14:	88 ef       	ldi	r24, 0xF8	; 248
     c16:	80 0f       	add	r24, r16
     c18:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
     c1c:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
     c24:	8d 2f       	mov	r24, r29
     c26:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <LCD_second_line+0x110>
			}
			else{
				uint8_t d10 = decimal_shift_back(read5);
     c2c:	80 2f       	mov	r24, r16
     c2e:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
     c32:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				uint8_t d3 = decimal_shift(read5);
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){                 //bottom line horizontal
     c3c:	cf 5f       	subi	r28, 0xFF	; 255
     c3e:	c0 31       	cpi	r28, 0x10	; 16
     c40:	f8 f2       	brcs	.-66     	; 0xc00 <LCD_second_line+0xd4>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<33){                     //third bottom line
     c42:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     c46:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     c4a:	81 97       	sbiw	r24, 0x21	; 33
     c4c:	80 f0       	brcs	.+32     	; 0xc6e <LCD_second_line+0x142>
     c4e:	12 c0       	rjmp	.+36     	; 0xc74 <LCD_second_line+0x148>
			for(y=14;y<16;y++){
				LCD_Write_Command(0x80 | y);
     c50:	8c 2f       	mov	r24, r28
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 2);
     c58:	8a e8       	ldi	r24, 0x8A	; 138
     c5a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<33){                     //third bottom line
			for(y=14;y<16;y++){
     c6a:	cf 5f       	subi	r28, 0xFF	; 255
     c6c:	01 c0       	rjmp	.+2      	; 0xc70 <LCD_second_line+0x144>
     c6e:	ce e0       	ldi	r28, 0x0E	; 14
     c70:	c0 31       	cpi	r28, 0x10	; 16
     c72:	70 f3       	brcs	.-36     	; 0xc50 <LCD_second_line+0x124>
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		
		LCD_Write_Command(0x30);
     c74:	80 e3       	ldi	r24, 0x30	; 48
     c76:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		//read=0;
	}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <LCD_third_line>:

	void LCD_third_line(uint16_t read5){
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	8c 01       	movw	r16, r24
		
		uint8_t y;
		LCD_Write_Command(0x36);
     c8e:	86 e3       	ldi	r24, 0x36	; 54
     c90:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2 > 32){
     c94:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     c98:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     c9c:	81 97       	sbiw	r24, 0x21	; 33
     c9e:	08 f5       	brcc	.+66     	; 0xce2 <LCD_third_line+0x5e>
     ca0:	35 c0       	rjmp	.+106    	; 0xd0c <LCD_third_line+0x88>
			for(y=0;y<16;y++){                          //third LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     ca2:	8c 2f       	mov	r24, r28
     ca4:	80 68       	ori	r24, 0x80	; 128
     ca6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 2);
     caa:	8a e8       	ldi	r24, 0x8A	; 138
     cac:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read5>7){
     cb0:	08 30       	cpi	r16, 0x08	; 8
     cb2:	11 05       	cpc	r17, r1
     cb4:	60 f0       	brcs	.+24     	; 0xcce <LCD_third_line+0x4a>
					
					uint8_t d5 =read5-8;
					uint8_t d6 = decimal_shift_h(d5);
     cb6:	88 ef       	ldi	r24, 0xF8	; 248
     cb8:	80 0f       	add	r24, r16
     cba:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
     cbe:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
     cc6:	8d 2f       	mov	r24, r29
     cc8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <LCD_third_line+0x5a>
					
				}
				else{
					uint8_t d7 = decimal_shift_h(read5);
     cce:	80 2f       	mov	r24, r16
     cd0:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
     cd4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
	void LCD_third_line(uint16_t read5){
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2 > 32){
			for(y=0;y<16;y++){                          //third LINE VERTICAL
     cde:	cf 5f       	subi	r28, 0xFF	; 255
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <LCD_third_line+0x60>
     ce2:	c0 e0       	ldi	r28, 0x00	; 0
     ce4:	c0 31       	cpi	r28, 0x10	; 16
     ce6:	e8 f2       	brcs	.-70     	; 0xca2 <LCD_third_line+0x1e>
     ce8:	c0 e0       	ldi	r28, 0x00	; 0
     cea:	0e c0       	rjmp	.+28     	; 0xd08 <LCD_third_line+0x84>
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){                         //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     cec:	8c 2f       	mov	r24, r28
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 1);
     cf4:	89 e8       	ldi	r24, 0x89	; 137
     cf6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d7);
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){                         //SECOND LINE VERTICAL
     d06:	cf 5f       	subi	r28, 0xFF	; 255
     d08:	c0 31       	cpi	r28, 0x10	; 16
     d0a:	80 f3       	brcs	.-32     	; 0xcec <LCD_third_line+0x68>
				//LCD_Write_Character(0x00);
			}
			
		}

		if(read2 < 48){
     d0c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     d10:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     d14:	c0 97       	sbiw	r24, 0x30	; 48
     d16:	80 f0       	brcs	.+32     	; 0xd38 <LCD_third_line+0xb4>
     d18:	24 c0       	rjmp	.+72     	; 0xd62 <LCD_third_line+0xde>
			for(y=0;y<16;y++){                     //forth LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     d1a:	8c 2f       	mov	r24, r28
     d1c:	80 68       	ori	r24, 0x80	; 128
     d1e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 3);
     d22:	8b e8       	ldi	r24, 0x8B	; 139
     d24:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			}
			
		}

		if(read2 < 48){
			for(y=0;y<16;y++){                     //forth LINE VERTICAL
     d34:	cf 5f       	subi	r28, 0xFF	; 255
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <LCD_third_line+0xb6>
     d38:	c0 e0       	ldi	r28, 0x00	; 0
     d3a:	c0 31       	cpi	r28, 0x10	; 16
     d3c:	70 f3       	brcs	.-36     	; 0xd1a <LCD_third_line+0x96>
     d3e:	ce e0       	ldi	r28, 0x0E	; 14
     d40:	0e c0       	rjmp	.+28     	; 0xd5e <LCD_third_line+0xda>
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
			for(y=14;y<16;y++){
				LCD_Write_Command(0x80 | y);
     d42:	8c 2f       	mov	r24, r28
     d44:	80 68       	ori	r24, 0x80	; 128
     d46:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 3);
     d4a:	8b e8       	ldi	r24, 0x8B	; 139
     d4c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Command(0x88 | 3);
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
			for(y=14;y<16;y++){
     d5c:	cf 5f       	subi	r28, 0xFF	; 255
     d5e:	c0 31       	cpi	r28, 0x10	; 16
     d60:	80 f3       	brcs	.-32     	; 0xd42 <LCD_third_line+0xbe>
     d62:	c0 e0       	ldi	r28, 0x00	; 0
     d64:	1c c0       	rjmp	.+56     	; 0xd9e <LCD_third_line+0x11a>

		//third LINE HORIZONTAL
		
		for(y=0;y<2;y++){
			
			LCD_Write_Command(0x80 | y);
     d66:	8c 2f       	mov	r24, r28
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 2);
     d6e:	8a e8       	ldi	r24, 0x8A	; 138
     d70:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
     d74:	08 30       	cpi	r16, 0x08	; 8
     d76:	11 05       	cpc	r17, r1
     d78:	60 f0       	brcs	.+24     	; 0xd92 <LCD_third_line+0x10e>
				uint8_t d1 =read5-8;
				uint8_t d2 = decimal_shift(d1);
     d7a:	88 ef       	ldi	r24, 0xF8	; 248
     d7c:	80 0f       	add	r24, r16
     d7e:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
     d82:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
     d8a:	8d 2f       	mov	r24, r29
     d8c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <LCD_third_line+0x118>
			}
			else{
				uint8_t d3 = decimal_shift(read5);
     d92:	80 2f       	mov	r24, r16
     d94:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
     d98:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		}


		//third LINE HORIZONTAL
		
		for(y=0;y<2;y++){
     d9c:	cf 5f       	subi	r28, 0xFF	; 255
     d9e:	c2 30       	cpi	r28, 0x02	; 2
     da0:	10 f3       	brcs	.-60     	; 0xd66 <LCD_third_line+0xe2>
     da2:	ce e0       	ldi	r28, 0x0E	; 14
     da4:	1f c0       	rjmp	.+62     	; 0xde4 <LCD_third_line+0x160>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){                   //bottom line
			LCD_Write_Command(0x80 | y);
     da6:	8c 2f       	mov	r24, r28
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 2);
     dae:	8a e8       	ldi	r24, 0x8A	; 138
     db0:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
     db4:	08 30       	cpi	r16, 0x08	; 8
     db6:	11 05       	cpc	r17, r1
     db8:	60 f0       	brcs	.+24     	; 0xdd2 <LCD_third_line+0x14e>
				uint8_t d8 =read5-8;
				uint8_t d9 = decimal_shift_back(d8);
     dba:	88 ef       	ldi	r24, 0xF8	; 248
     dbc:	80 0f       	add	r24, r16
     dbe:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
     dc2:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
     dca:	8d 2f       	mov	r24, r29
     dcc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     dd0:	08 c0       	rjmp	.+16     	; 0xde2 <LCD_third_line+0x15e>
			}
			else{
				uint8_t d10 = decimal_shift_back(read5);
     dd2:	80 2f       	mov	r24, r16
     dd4:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
     dd8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				uint8_t d3 = decimal_shift(read5);
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){                   //bottom line
     de2:	cf 5f       	subi	r28, 0xFF	; 255
     de4:	c0 31       	cpi	r28, 0x10	; 16
     de6:	f8 f2       	brcs	.-66     	; 0xda6 <LCD_third_line+0x122>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>32){                          //second line horizontal full
     de8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     dec:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     df0:	81 97       	sbiw	r24, 0x21	; 33
     df2:	80 f4       	brcc	.+32     	; 0xe14 <LCD_third_line+0x190>
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <LCD_third_line+0x196>
			for(y=0;y<2;y++){
				LCD_Write_Command(0x80 | y);
     df6:	8c 2f       	mov	r24, r28
     df8:	80 68       	ori	r24, 0x80	; 128
     dfa:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 1);
     dfe:	89 e8       	ldi	r24, 0x89	; 137
     e00:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>32){                          //second line horizontal full
			for(y=0;y<2;y++){
     e10:	cf 5f       	subi	r28, 0xFF	; 255
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <LCD_third_line+0x192>
     e14:	c0 e0       	ldi	r28, 0x00	; 0
     e16:	c2 30       	cpi	r28, 0x02	; 2
     e18:	70 f3       	brcs	.-36     	; 0xdf6 <LCD_third_line+0x172>
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		
		LCD_Write_Command(0x30);
     e1a:	80 e3       	ldi	r24, 0x30	; 48
     e1c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		//read=0;
		
	}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <LCD_forth_line>:

	void LCD_forth_line (uint16_t read5){
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	8c 01       	movw	r16, r24
		
		if(read5>48)
     e34:	c1 97       	sbiw	r24, 0x31	; 49
     e36:	10 f0       	brcs	.+4      	; 0xe3c <LCD_forth_line+0x12>
		read5=16;
     e38:	00 e1       	ldi	r16, 0x10	; 16
     e3a:	10 e0       	ldi	r17, 0x00	; 0
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
     e3c:	86 e3       	ldi	r24, 0x36	; 54
     e3e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2 > 48){
     e42:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     e46:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     e4a:	c1 97       	sbiw	r24, 0x31	; 49
     e4c:	08 f5       	brcc	.+66     	; 0xe90 <LCD_forth_line+0x66>
     e4e:	23 c0       	rjmp	.+70     	; 0xe96 <LCD_forth_line+0x6c>
			for(y=0;y<16;y++){                   //forth LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     e50:	8c 2f       	mov	r24, r28
     e52:	80 68       	ori	r24, 0x80	; 128
     e54:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 3);
     e58:	8b e8       	ldi	r24, 0x8B	; 139
     e5a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read5>7){
     e5e:	08 30       	cpi	r16, 0x08	; 8
     e60:	11 05       	cpc	r17, r1
     e62:	60 f0       	brcs	.+24     	; 0xe7c <LCD_forth_line+0x52>
					
					uint8_t d5 =read5-8;
					uint8_t d6 = decimal_shift_h(d5);
     e64:	88 ef       	ldi	r24, 0xF8	; 248
     e66:	80 0f       	add	r24, r16
     e68:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
     e6c:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
     e74:	8d 2f       	mov	r24, r29
     e76:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <LCD_forth_line+0x62>
					
				}
				else{
					uint8_t d7 = decimal_shift_h(read5);
     e7c:	80 2f       	mov	r24, r16
     e7e:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
     e82:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2 > 48){
			for(y=0;y<16;y++){                   //forth LINE VERTICAL
     e8c:	cf 5f       	subi	r28, 0xFF	; 255
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <LCD_forth_line+0x68>
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	c0 31       	cpi	r28, 0x10	; 16
     e94:	e8 f2       	brcs	.-70     	; 0xe50 <LCD_forth_line+0x26>
     e96:	c0 e0       	ldi	r28, 0x00	; 0
     e98:	1c c0       	rjmp	.+56     	; 0xed2 <LCD_forth_line+0xa8>
			
		}
		
		for(y=0;y<2;y++){                //forth line horizontal
			
			LCD_Write_Command(0x80 | y);
     e9a:	8c 2f       	mov	r24, r28
     e9c:	80 68       	ori	r24, 0x80	; 128
     e9e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 3);
     ea2:	8b e8       	ldi	r24, 0x8B	; 139
     ea4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
     ea8:	08 30       	cpi	r16, 0x08	; 8
     eaa:	11 05       	cpc	r17, r1
     eac:	60 f0       	brcs	.+24     	; 0xec6 <LCD_forth_line+0x9c>
				uint8_t d1 =read5-8;
				uint8_t d2 = decimal_shift(d1);
     eae:	88 ef       	ldi	r24, 0xF8	; 248
     eb0:	80 0f       	add	r24, r16
     eb2:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
     eb6:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
     ebe:	8d 2f       	mov	r24, r29
     ec0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <LCD_forth_line+0xa6>
			}
			else{
				uint8_t d3 = decimal_shift(read5);
     ec6:	80 2f       	mov	r24, r16
     ec8:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
     ecc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			
			
			
		}
		
		for(y=0;y<2;y++){                //forth line horizontal
     ed0:	cf 5f       	subi	r28, 0xFF	; 255
     ed2:	c2 30       	cpi	r28, 0x02	; 2
     ed4:	10 f3       	brcs	.-60     	; 0xe9a <LCD_forth_line+0x70>
     ed6:	ce e0       	ldi	r28, 0x0E	; 14
     ed8:	1f c0       	rjmp	.+62     	; 0xf18 <LCD_forth_line+0xee>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){                  //bottom line
			LCD_Write_Command(0x80 | y);
     eda:	8c 2f       	mov	r24, r28
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 3);
     ee2:	8b e8       	ldi	r24, 0x8B	; 139
     ee4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
     ee8:	08 30       	cpi	r16, 0x08	; 8
     eea:	11 05       	cpc	r17, r1
     eec:	60 f0       	brcs	.+24     	; 0xf06 <LCD_forth_line+0xdc>
				uint8_t d8 =read5-8;
				uint8_t d9 = decimal_shift_back(d8);
     eee:	88 ef       	ldi	r24, 0xF8	; 248
     ef0:	80 0f       	add	r24, r16
     ef2:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
     ef6:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
     efe:	8d 2f       	mov	r24, r29
     f00:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <LCD_forth_line+0xec>
			}
			else{
				uint8_t d10 = decimal_shift_back(read5);
     f06:	80 2f       	mov	r24, r16
     f08:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
     f0c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				uint8_t d3 = decimal_shift(read5);
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){                  //bottom line
     f16:	cf 5f       	subi	r28, 0xFF	; 255
     f18:	c0 31       	cpi	r28, 0x10	; 16
     f1a:	f8 f2       	brcs	.-66     	; 0xeda <LCD_forth_line+0xb0>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>48){
     f1c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     f20:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     f24:	c1 97       	sbiw	r24, 0x31	; 49
     f26:	80 f4       	brcc	.+32     	; 0xf48 <LCD_forth_line+0x11e>
     f28:	12 c0       	rjmp	.+36     	; 0xf4e <LCD_forth_line+0x124>
			for(y=0;y<2;y++){
				LCD_Write_Command(0x80 | y);
     f2a:	8c 2f       	mov	r24, r28
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 2);
     f32:	8a e8       	ldi	r24, 0x8A	; 138
     f34:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>48){
			for(y=0;y<2;y++){
     f44:	cf 5f       	subi	r28, 0xFF	; 255
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <LCD_forth_line+0x120>
     f48:	c0 e0       	ldi	r28, 0x00	; 0
     f4a:	c2 30       	cpi	r28, 0x02	; 2
     f4c:	70 f3       	brcs	.-36     	; 0xf2a <LCD_forth_line+0x100>
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		
		LCD_Write_Command(0x30);
     f4e:	80 e3       	ldi	r24, 0x30	; 48
     f50:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		//read=0;
	}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret

00000f5e <LCD_fifth_line>:

	void LCD_fifth_line (uint16_t read4){
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	8c 01       	movw	r16, r24
		
		if(read4>16)
     f68:	41 97       	sbiw	r24, 0x11	; 17
     f6a:	10 f0       	brcs	.+4      	; 0xf70 <LCD_fifth_line+0x12>
		read4=16;
     f6c:	00 e1       	ldi	r16, 0x10	; 16
     f6e:	10 e0       	ldi	r17, 0x00	; 0
		
		uint8_t y;
		LCD_Write_Command(0x36);
     f70:	86 e3       	ldi	r24, 0x36	; 54
     f72:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2<17){
     f76:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
     f7a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
     f7e:	41 97       	sbiw	r24, 0x11	; 17
     f80:	08 f1       	brcs	.+66     	; 0xfc4 <LCD_fifth_line+0x66>
     f82:	35 c0       	rjmp	.+106    	; 0xfee <LCD_fifth_line+0x90>
			for(y=0;y<16;y++){                                 //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     f84:	8c 2f       	mov	r24, r28
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 4);
     f8c:	8c e8       	ldi	r24, 0x8C	; 140
     f8e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read4>7){
     f92:	08 30       	cpi	r16, 0x08	; 8
     f94:	11 05       	cpc	r17, r1
     f96:	60 f0       	brcs	.+24     	; 0xfb0 <LCD_fifth_line+0x52>
					
					uint8_t d5 =read4-8;
					uint8_t d6 = decimal_shift_h(d5);
     f98:	88 ef       	ldi	r24, 0xF8	; 248
     f9a:	80 0f       	add	r24, r16
     f9c:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
     fa0:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
     fa8:	8d 2f       	mov	r24, r29
     faa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <LCD_fifth_line+0x62>
					//LCD_Write_Character(0x00);
				}
				else{
					uint8_t d7 = decimal_shift_h(read4);
     fb0:	80 2f       	mov	r24, r16
     fb2:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
     fb6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		read4=16;
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2<17){
			for(y=0;y<16;y++){                                 //SECOND LINE VERTICAL
     fc0:	cf 5f       	subi	r28, 0xFF	; 255
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <LCD_fifth_line+0x68>
     fc4:	c0 e0       	ldi	r28, 0x00	; 0
     fc6:	c0 31       	cpi	r28, 0x10	; 16
     fc8:	e8 f2       	brcs	.-70     	; 0xf84 <LCD_fifth_line+0x26>
     fca:	c0 e0       	ldi	r28, 0x00	; 0
     fcc:	0e c0       	rjmp	.+28     	; 0xfea <LCD_fifth_line+0x8c>
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){                                //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
     fce:	8c 2f       	mov	r24, r28
     fd0:	80 68       	ori	r24, 0x80	; 128
     fd2:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 5);
     fd6:	8d e8       	ldi	r24, 0x8D	; 141
     fd8:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d7);
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){                                //SECOND LINE VERTICAL
     fe8:	cf 5f       	subi	r28, 0xFF	; 255
     fea:	c0 31       	cpi	r28, 0x10	; 16
     fec:	80 f3       	brcs	.-32     	; 0xfce <LCD_fifth_line+0x70>
     fee:	c0 e0       	ldi	r28, 0x00	; 0
     ff0:	1c c0       	rjmp	.+56     	; 0x102a <LCD_fifth_line+0xcc>

		//for(x=0;x<1;x++){                               //FIRST LINE HORIZONTAL
		
		for(y=0;y<2;y++){
			
			LCD_Write_Command(0x80 | y);
     ff2:	8c 2f       	mov	r24, r28
     ff4:	80 68       	ori	r24, 0x80	; 128
     ff6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 4);
     ffa:	8c e8       	ldi	r24, 0x8C	; 140
     ffc:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read4>7){
    1000:	08 30       	cpi	r16, 0x08	; 8
    1002:	11 05       	cpc	r17, r1
    1004:	60 f0       	brcs	.+24     	; 0x101e <LCD_fifth_line+0xc0>
				uint8_t d1 =read4-8;
				uint8_t d2 = decimal_shift(d1);
    1006:	88 ef       	ldi	r24, 0xF8	; 248
    1008:	80 0f       	add	r24, r16
    100a:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
    100e:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
    1016:	8d 2f       	mov	r24, r29
    1018:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <LCD_fifth_line+0xca>
			}
			else{
				uint8_t d3 = decimal_shift(read4);
    101e:	80 2f       	mov	r24, r16
    1020:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
    1024:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		}
		

		//for(x=0;x<1;x++){                               //FIRST LINE HORIZONTAL
		
		for(y=0;y<2;y++){
    1028:	cf 5f       	subi	r28, 0xFF	; 255
    102a:	c2 30       	cpi	r28, 0x02	; 2
    102c:	10 f3       	brcs	.-60     	; 0xff2 <LCD_fifth_line+0x94>
    102e:	ce e0       	ldi	r28, 0x0E	; 14
    1030:	1f c0       	rjmp	.+62     	; 0x1070 <LCD_fifth_line+0x112>
			}
		}
		
		//for(x=2;(x>=2)&(x<4);x++){   //SECOND LINE HORIZONTAL
		for(y=14;y<16;y++){
			LCD_Write_Command(0x80 | y);
    1032:	8c 2f       	mov	r24, r28
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 4);
    103a:	8c e8       	ldi	r24, 0x8C	; 140
    103c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read4>7){
    1040:	08 30       	cpi	r16, 0x08	; 8
    1042:	11 05       	cpc	r17, r1
    1044:	60 f0       	brcs	.+24     	; 0x105e <LCD_fifth_line+0x100>
				uint8_t d8 =read4-8;
				uint8_t d9 = decimal_shift_back(d8);
    1046:	88 ef       	ldi	r24, 0xF8	; 248
    1048:	80 0f       	add	r24, r16
    104a:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
    104e:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
    1056:	8d 2f       	mov	r24, r29
    1058:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    105c:	08 c0       	rjmp	.+16     	; 0x106e <LCD_fifth_line+0x110>
			}
			else{
				uint8_t d10 = decimal_shift_back(read4);
    105e:	80 2f       	mov	r24, r16
    1060:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
    1064:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		//for(x=2;(x>=2)&(x<4);x++){   //SECOND LINE HORIZONTAL
		for(y=14;y<16;y++){
    106e:	cf 5f       	subi	r28, 0xFF	; 255
    1070:	c0 31       	cpi	r28, 0x10	; 16
    1072:	f8 f2       	brcs	.-66     	; 0x1032 <LCD_fifth_line+0xd4>
				uint8_t d10 = decimal_shift_back(read4);
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		if(read2<17){
    1074:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    1078:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    107c:	41 97       	sbiw	r24, 0x11	; 17
    107e:	80 f0       	brcs	.+32     	; 0x10a0 <LCD_fifth_line+0x142>
    1080:	12 c0       	rjmp	.+36     	; 0x10a6 <LCD_fifth_line+0x148>
			for(y=14;y<16;y++){
				LCD_Write_Command(0x80 | y);
    1082:	8c 2f       	mov	r24, r28
    1084:	80 68       	ori	r24, 0x80	; 128
    1086:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 5);
    108a:	8d e8       	ldi	r24, 0x8D	; 141
    108c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		if(read2<17){
			for(y=14;y<16;y++){
    109c:	cf 5f       	subi	r28, 0xFF	; 255
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <LCD_fifth_line+0x144>
    10a0:	ce e0       	ldi	r28, 0x0E	; 14
    10a2:	c0 31       	cpi	r28, 0x10	; 16
    10a4:	70 f3       	brcs	.-36     	; 0x1082 <LCD_fifth_line+0x124>
				LCD_Write_Command(0x88 | 5);
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		LCD_Write_Command(0x30);
    10a6:	80 e3       	ldi	r24, 0x30	; 48
    10a8:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>

		//read=0;
	}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <first_section>:
	}
	return 0;
}

void first_section(void){
	LCD_first_line(read2);
    10b6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    10ba:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    10be:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_first_line>
	LCD_fifth_line (read2);
    10c2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    10c6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    10ca:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCD_fifth_line>
    10ce:	08 95       	ret

000010d0 <LCD_sixth_line>:
		LCD_Write_Command(0x30);

		//read=0;
	}

	void LCD_sixth_line (uint16_t read5){
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	8c 01       	movw	r16, r24
		
		if(read5>16)
    10da:	41 97       	sbiw	r24, 0x11	; 17
    10dc:	10 f0       	brcs	.+4      	; 0x10e2 <LCD_sixth_line+0x12>
		read5=16;
    10de:	00 e1       	ldi	r16, 0x10	; 16
    10e0:	10 e0       	ldi	r17, 0x00	; 0
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
    10e2:	86 e3       	ldi	r24, 0x36	; 54
    10e4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2 < 33){
    10e8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    10ec:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    10f0:	81 97       	sbiw	r24, 0x21	; 33
    10f2:	08 f1       	brcs	.+66     	; 0x1136 <LCD_sixth_line+0x66>
    10f4:	47 c0       	rjmp	.+142    	; 0x1184 <LCD_sixth_line+0xb4>
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
    10f6:	8c 2f       	mov	r24, r28
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 5);
    10fe:	8d e8       	ldi	r24, 0x8D	; 141
    1100:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read5>7){
    1104:	08 30       	cpi	r16, 0x08	; 8
    1106:	11 05       	cpc	r17, r1
    1108:	60 f0       	brcs	.+24     	; 0x1122 <LCD_sixth_line+0x52>
					
					uint8_t d5 =read5-8;
					uint8_t d6 = decimal_shift_h(d5);
    110a:	88 ef       	ldi	r24, 0xF8	; 248
    110c:	80 0f       	add	r24, r16
    110e:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
    1112:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
    111a:	8d 2f       	mov	r24, r29
    111c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <LCD_sixth_line+0x62>
					//LCD_Write_Character(0x00);
				}
				else{
					uint8_t d7 = decimal_shift_h(read5);
    1122:	80 2f       	mov	r24, r16
    1124:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
    1128:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2 < 33){
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
    1132:	cf 5f       	subi	r28, 0xFF	; 255
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <LCD_sixth_line+0x68>
    1136:	c0 e0       	ldi	r28, 0x00	; 0
    1138:	c0 31       	cpi	r28, 0x10	; 16
    113a:	e8 f2       	brcs	.-70     	; 0x10f6 <LCD_sixth_line+0x26>
    113c:	c0 e0       	ldi	r28, 0x00	; 0
    113e:	0e c0       	rjmp	.+28     	; 0x115c <LCD_sixth_line+0x8c>
			
			//}
			
			
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
    1140:	8c 2f       	mov	r24, r28
    1142:	80 68       	ori	r24, 0x80	; 128
    1144:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 6);
    1148:	8e e8       	ldi	r24, 0x8E	; 142
    114a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			}
			
			//}
			
			
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
    115a:	cf 5f       	subi	r28, 0xFF	; 255
    115c:	c0 31       	cpi	r28, 0x10	; 16
    115e:	80 f3       	brcs	.-32     	; 0x1140 <LCD_sixth_line+0x70>
    1160:	c0 e0       	ldi	r28, 0x00	; 0
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <LCD_sixth_line+0xb0>
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
    1164:	8c 2f       	mov	r24, r28
    1166:	80 68       	ori	r24, 0x80	; 128
    1168:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 4);
    116c:	8c e8       	ldi	r24, 0x8C	; 140
    116e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Command(0x88 | 6);
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
    117e:	cf 5f       	subi	r28, 0xFF	; 255
    1180:	c0 31       	cpi	r28, 0x10	; 16
    1182:	80 f3       	brcs	.-32     	; 0x1164 <LCD_sixth_line+0x94>
    1184:	c0 e0       	ldi	r28, 0x00	; 0
    1186:	1c c0       	rjmp	.+56     	; 0x11c0 <LCD_sixth_line+0xf0>
				//LCD_Write_Character(0x00);
			}
		}
		for(y=0;y<2;y++){
			
			LCD_Write_Command(0x80 | y);
    1188:	8c 2f       	mov	r24, r28
    118a:	80 68       	ori	r24, 0x80	; 128
    118c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 5);
    1190:	8d e8       	ldi	r24, 0x8D	; 141
    1192:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
    1196:	08 30       	cpi	r16, 0x08	; 8
    1198:	11 05       	cpc	r17, r1
    119a:	60 f0       	brcs	.+24     	; 0x11b4 <LCD_sixth_line+0xe4>
				uint8_t d1 =read5-8;
				uint8_t d2 = decimal_shift(d1);
    119c:	88 ef       	ldi	r24, 0xF8	; 248
    119e:	80 0f       	add	r24, r16
    11a0:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
    11a4:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
    11ac:	8d 2f       	mov	r24, r29
    11ae:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <LCD_sixth_line+0xee>
			}
			else{
				uint8_t d3 = decimal_shift(read5);
    11b4:	80 2f       	mov	r24, r16
    11b6:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
    11ba:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
		}
		for(y=0;y<2;y++){
    11be:	cf 5f       	subi	r28, 0xFF	; 255
    11c0:	c2 30       	cpi	r28, 0x02	; 2
    11c2:	10 f3       	brcs	.-60     	; 0x1188 <LCD_sixth_line+0xb8>
    11c4:	ce e0       	ldi	r28, 0x0E	; 14
    11c6:	1f c0       	rjmp	.+62     	; 0x1206 <LCD_sixth_line+0x136>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){
			LCD_Write_Command(0x80 | y);
    11c8:	8c 2f       	mov	r24, r28
    11ca:	80 68       	ori	r24, 0x80	; 128
    11cc:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 5);
    11d0:	8d e8       	ldi	r24, 0x8D	; 141
    11d2:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
    11d6:	08 30       	cpi	r16, 0x08	; 8
    11d8:	11 05       	cpc	r17, r1
    11da:	60 f0       	brcs	.+24     	; 0x11f4 <LCD_sixth_line+0x124>
				uint8_t d8 =read5-8;
				uint8_t d9 = decimal_shift_back(d8);
    11dc:	88 ef       	ldi	r24, 0xF8	; 248
    11de:	80 0f       	add	r24, r16
    11e0:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
    11e4:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
    11ec:	8d 2f       	mov	r24, r29
    11ee:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <LCD_sixth_line+0x134>
			}
			else{
				uint8_t d10 = decimal_shift_back(read5);
    11f4:	80 2f       	mov	r24, r16
    11f6:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
    11fa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				uint8_t d3 = decimal_shift(read5);
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){
    1204:	cf 5f       	subi	r28, 0xFF	; 255
    1206:	c0 31       	cpi	r28, 0x10	; 16
    1208:	f8 f2       	brcs	.-66     	; 0x11c8 <LCD_sixth_line+0xf8>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<33){
    120a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    120e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    1212:	81 97       	sbiw	r24, 0x21	; 33
    1214:	80 f0       	brcs	.+32     	; 0x1236 <LCD_sixth_line+0x166>
    1216:	12 c0       	rjmp	.+36     	; 0x123c <LCD_sixth_line+0x16c>
			for(y=14;y<16;y++){
				LCD_Write_Command(0x80 | y);
    1218:	8c 2f       	mov	r24, r28
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 6);
    1220:	8e e8       	ldi	r24, 0x8E	; 142
    1222:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<33){
			for(y=14;y<16;y++){
    1232:	cf 5f       	subi	r28, 0xFF	; 255
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <LCD_sixth_line+0x168>
    1236:	ce e0       	ldi	r28, 0x0E	; 14
    1238:	c0 31       	cpi	r28, 0x10	; 16
    123a:	70 f3       	brcs	.-36     	; 0x1218 <LCD_sixth_line+0x148>
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		
		LCD_Write_Command(0x30);
    123c:	80 e3       	ldi	r24, 0x30	; 48
    123e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		//read=0;
	}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	08 95       	ret

0000124c <second_section>:
void first_section(void){
	LCD_first_line(read2);
	LCD_fifth_line (read2);
}

void second_section(void){
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
	uint16_t m1 = read2 - 16;
    1250:	c0 91 8a 00 	lds	r28, 0x008A	; 0x80008a <__data_end>
    1254:	d0 91 8b 00 	lds	r29, 0x008B	; 0x80008b <__data_end+0x1>
    1258:	60 97       	sbiw	r28, 0x10	; 16
	LCD_second_line(m1);
    125a:	ce 01       	movw	r24, r28
    125c:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_second_line>
	LCD_sixth_line (m1);
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_sixth_line>
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <LCD_seventh_line>:
		
		LCD_Write_Command(0x30);
		//read=0;
	}

	void LCD_seventh_line(uint16_t read5){
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	8c 01       	movw	r16, r24
		
		uint8_t y;
		LCD_Write_Command(0x36);
    1276:	86 e3       	ldi	r24, 0x36	; 54
    1278:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2 > 32){
    127c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    1280:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    1284:	81 97       	sbiw	r24, 0x21	; 33
    1286:	08 f5       	brcc	.+66     	; 0x12ca <LCD_seventh_line+0x5e>
    1288:	35 c0       	rjmp	.+106    	; 0x12f4 <LCD_seventh_line+0x88>
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
    128a:	8c 2f       	mov	r24, r28
    128c:	80 68       	ori	r24, 0x80	; 128
    128e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 6);
    1292:	8e e8       	ldi	r24, 0x8E	; 142
    1294:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read5>7){
    1298:	08 30       	cpi	r16, 0x08	; 8
    129a:	11 05       	cpc	r17, r1
    129c:	60 f0       	brcs	.+24     	; 0x12b6 <LCD_seventh_line+0x4a>
					
					uint8_t d5 =read5-8;
					uint8_t d6 = decimal_shift_h(d5);
    129e:	88 ef       	ldi	r24, 0xF8	; 248
    12a0:	80 0f       	add	r24, r16
    12a2:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
    12a6:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
    12ae:	8d 2f       	mov	r24, r29
    12b0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <LCD_seventh_line+0x5a>
					//LCD_Write_Character(0x00);
				}
				else{
					uint8_t d7 = decimal_shift_h(read5);
    12b6:	80 2f       	mov	r24, r16
    12b8:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
    12bc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
	void LCD_seventh_line(uint16_t read5){
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2 > 32){
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
    12c6:	cf 5f       	subi	r28, 0xFF	; 255
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <LCD_seventh_line+0x60>
    12ca:	c0 e0       	ldi	r28, 0x00	; 0
    12cc:	c0 31       	cpi	r28, 0x10	; 16
    12ce:	e8 f2       	brcs	.-70     	; 0x128a <LCD_seventh_line+0x1e>
    12d0:	c0 e0       	ldi	r28, 0x00	; 0
    12d2:	0e c0       	rjmp	.+28     	; 0x12f0 <LCD_seventh_line+0x84>
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
    12d4:	8c 2f       	mov	r24, r28
    12d6:	80 68       	ori	r24, 0x80	; 128
    12d8:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 5);
    12dc:	8d e8       	ldi	r24, 0x8D	; 141
    12de:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d7);
					LCD_Write_Character(0x00);
				}
			}
			
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
    12ee:	cf 5f       	subi	r28, 0xFF	; 255
    12f0:	c0 31       	cpi	r28, 0x10	; 16
    12f2:	80 f3       	brcs	.-32     	; 0x12d4 <LCD_seventh_line+0x68>
				//LCD_Write_Character(0x00);
			}
			
		}

		if(read2 < 48){
    12f4:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    12f8:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    12fc:	c0 97       	sbiw	r24, 0x30	; 48
    12fe:	80 f0       	brcs	.+32     	; 0x1320 <LCD_seventh_line+0xb4>
    1300:	24 c0       	rjmp	.+72     	; 0x134a <LCD_seventh_line+0xde>
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
    1302:	8c 2f       	mov	r24, r28
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 7);
    130a:	8f e8       	ldi	r24, 0x8F	; 143
    130c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0x00);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00);
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			}
			
		}

		if(read2 < 48){
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
    131c:	cf 5f       	subi	r28, 0xFF	; 255
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <LCD_seventh_line+0xb6>
    1320:	c0 e0       	ldi	r28, 0x00	; 0
    1322:	c0 31       	cpi	r28, 0x10	; 16
    1324:	70 f3       	brcs	.-36     	; 0x1302 <LCD_seventh_line+0x96>
    1326:	ce e0       	ldi	r28, 0x0E	; 14
    1328:	0e c0       	rjmp	.+28     	; 0x1346 <LCD_seventh_line+0xda>
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
			for(y=14;y<16;y++){
				LCD_Write_Command(0x80 | y);
    132a:	8c 2f       	mov	r24, r28
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 7);
    1332:	8f e8       	ldi	r24, 0x8F	; 143
    1334:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Command(0x88 | 7);
				LCD_Write_Character(0x00);
				LCD_Write_Character(0x00);
				//LCD_Write_Character(0x00);
			}
			for(y=14;y<16;y++){
    1344:	cf 5f       	subi	r28, 0xFF	; 255
    1346:	c0 31       	cpi	r28, 0x10	; 16
    1348:	80 f3       	brcs	.-32     	; 0x132a <LCD_seventh_line+0xbe>
    134a:	c0 e0       	ldi	r28, 0x00	; 0
    134c:	1c c0       	rjmp	.+56     	; 0x1386 <LCD_seventh_line+0x11a>
		
		//FIRST LINE HORIZONTAL
		
		for(y=0;y<2;y++){
			
			LCD_Write_Command(0x80 | y);
    134e:	8c 2f       	mov	r24, r28
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 6);
    1356:	8e e8       	ldi	r24, 0x8E	; 142
    1358:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
    135c:	08 30       	cpi	r16, 0x08	; 8
    135e:	11 05       	cpc	r17, r1
    1360:	60 f0       	brcs	.+24     	; 0x137a <LCD_seventh_line+0x10e>
				uint8_t d1 =read5-8;
				uint8_t d2 = decimal_shift(d1);
    1362:	88 ef       	ldi	r24, 0xF8	; 248
    1364:	80 0f       	add	r24, r16
    1366:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
    136a:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
    1372:	8d 2f       	mov	r24, r29
    1374:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <LCD_seventh_line+0x118>
			}
			else{
				uint8_t d3 = decimal_shift(read5);
    137a:	80 2f       	mov	r24, r16
    137c:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
    1380:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>


		
		//FIRST LINE HORIZONTAL
		
		for(y=0;y<2;y++){
    1384:	cf 5f       	subi	r28, 0xFF	; 255
    1386:	c2 30       	cpi	r28, 0x02	; 2
    1388:	10 f3       	brcs	.-60     	; 0x134e <LCD_seventh_line+0xe2>
    138a:	ce e0       	ldi	r28, 0x0E	; 14
    138c:	1f c0       	rjmp	.+62     	; 0x13cc <LCD_seventh_line+0x160>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){
			LCD_Write_Command(0x80 | y);
    138e:	8c 2f       	mov	r24, r28
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 6);
    1396:	8e e8       	ldi	r24, 0x8E	; 142
    1398:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
    139c:	08 30       	cpi	r16, 0x08	; 8
    139e:	11 05       	cpc	r17, r1
    13a0:	60 f0       	brcs	.+24     	; 0x13ba <LCD_seventh_line+0x14e>
				uint8_t d8 =read5-8;
				uint8_t d9 = decimal_shift_back(d8);
    13a2:	88 ef       	ldi	r24, 0xF8	; 248
    13a4:	80 0f       	add	r24, r16
    13a6:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
    13aa:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
    13b2:	8d 2f       	mov	r24, r29
    13b4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <LCD_seventh_line+0x15e>
			}
			else{
				uint8_t d10 = decimal_shift_back(read5);
    13ba:	80 2f       	mov	r24, r16
    13bc:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
    13c0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				uint8_t d3 = decimal_shift(read5);
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){
    13ca:	cf 5f       	subi	r28, 0xFF	; 255
    13cc:	c0 31       	cpi	r28, 0x10	; 16
    13ce:	f8 f2       	brcs	.-66     	; 0x138e <LCD_seventh_line+0x122>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>32){
    13d0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    13d4:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    13d8:	81 97       	sbiw	r24, 0x21	; 33
    13da:	80 f4       	brcc	.+32     	; 0x13fc <LCD_seventh_line+0x190>
    13dc:	12 c0       	rjmp	.+36     	; 0x1402 <LCD_seventh_line+0x196>
			for(y=0;y<2;y++){
				LCD_Write_Command(0x80 | y);
    13de:	8c 2f       	mov	r24, r28
    13e0:	80 68       	ori	r24, 0x80	; 128
    13e2:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 5);
    13e6:	8d e8       	ldi	r24, 0x8D	; 141
    13e8:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>32){
			for(y=0;y<2;y++){
    13f8:	cf 5f       	subi	r28, 0xFF	; 255
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <LCD_seventh_line+0x192>
    13fc:	c0 e0       	ldi	r28, 0x00	; 0
    13fe:	c2 30       	cpi	r28, 0x02	; 2
    1400:	70 f3       	brcs	.-36     	; 0x13de <LCD_seventh_line+0x172>
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		
		LCD_Write_Command(0x30);
    1402:	80 e3       	ldi	r24, 0x30	; 48
    1404:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		//read=0;
		
	}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <third_section>:
	uint16_t m1 = read2 - 16;
	LCD_second_line(m1);
	LCD_sixth_line (m1);
}

void third_section(void){
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
	uint16_t m2 = read2 - 32;
    1416:	c0 91 8a 00 	lds	r28, 0x008A	; 0x80008a <__data_end>
    141a:	d0 91 8b 00 	lds	r29, 0x008B	; 0x80008b <__data_end+0x1>
    141e:	a0 97       	sbiw	r28, 0x20	; 32
	LCD_third_line(m2);
    1420:	ce 01       	movw	r24, r28
    1422:	0e 94 42 06 	call	0xc84	; 0xc84 <LCD_third_line>
	LCD_seventh_line(m2);
    1426:	ce 01       	movw	r24, r28
    1428:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_seventh_line>
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <LCD_eight_line>:
		LCD_Write_Command(0x30);
		//read=0;
		
	}

	void LCD_eight_line (uint16_t read5){
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	8c 01       	movw	r16, r24
		
		if(read5>48)
    143c:	c1 97       	sbiw	r24, 0x31	; 49
    143e:	10 f0       	brcs	.+4      	; 0x1444 <LCD_eight_line+0x12>
		read5=16;
    1440:	00 e1       	ldi	r16, 0x10	; 16
    1442:	10 e0       	ldi	r17, 0x00	; 0
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
    1444:	86 e3       	ldi	r24, 0x36	; 54
    1446:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		if(read2 > 48){
    144a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    144e:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    1452:	c1 97       	sbiw	r24, 0x31	; 49
    1454:	08 f5       	brcc	.+66     	; 0x1498 <LCD_eight_line+0x66>
    1456:	23 c0       	rjmp	.+70     	; 0x149e <LCD_eight_line+0x6c>
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
				LCD_Write_Command(0x80 | y);
    1458:	8c 2f       	mov	r24, r28
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 7);
    1460:	8f e8       	ldi	r24, 0x8F	; 143
    1462:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				if(read5>7){
    1466:	08 30       	cpi	r16, 0x08	; 8
    1468:	11 05       	cpc	r17, r1
    146a:	60 f0       	brcs	.+24     	; 0x1484 <LCD_eight_line+0x52>
					
					uint8_t d5 =read5-8;
					uint8_t d6 = decimal_shift_h(d5);
    146c:	88 ef       	ldi	r24, 0xF8	; 248
    146e:	80 0f       	add	r24, r16
    1470:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
    1474:	d8 2f       	mov	r29, r24
					LCD_Write_Character(0x00);
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00 | d6 );
    147c:	8d 2f       	mov	r24, r29
    147e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    1482:	08 c0       	rjmp	.+16     	; 0x1494 <LCD_eight_line+0x62>
					//LCD_Write_Character(0x00);
				}
				else{
					uint8_t d7 = decimal_shift_h(read5);
    1484:	80 2f       	mov	r24, r16
    1486:	0e 94 cf 04 	call	0x99e	; 0x99e <decimal_shift_h>
					LCD_Write_Character(0x00 | d7);
    148a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
					LCD_Write_Character(0x00);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
		
		
		uint8_t y;
		LCD_Write_Command(0x36);
		if(read2 > 48){
			for(y=0;y<16;y++){ //SECOND LINE VERTICAL
    1494:	cf 5f       	subi	r28, 0xFF	; 255
    1496:	01 c0       	rjmp	.+2      	; 0x149a <LCD_eight_line+0x68>
    1498:	c0 e0       	ldi	r28, 0x00	; 0
    149a:	c0 31       	cpi	r28, 0x10	; 16
    149c:	e8 f2       	brcs	.-70     	; 0x1458 <LCD_eight_line+0x26>
    149e:	c0 e0       	ldi	r28, 0x00	; 0
    14a0:	1c c0       	rjmp	.+56     	; 0x14da <LCD_eight_line+0xa8>
			
		}
		
		for(y=0;y<2;y++){
			
			LCD_Write_Command(0x80 | y);
    14a2:	8c 2f       	mov	r24, r28
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 7);
    14aa:	8f e8       	ldi	r24, 0x8F	; 143
    14ac:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
    14b0:	08 30       	cpi	r16, 0x08	; 8
    14b2:	11 05       	cpc	r17, r1
    14b4:	60 f0       	brcs	.+24     	; 0x14ce <LCD_eight_line+0x9c>
				uint8_t d1 =read5-8;
				uint8_t d2 = decimal_shift(d1);
    14b6:	88 ef       	ldi	r24, 0xF8	; 248
    14b8:	80 0f       	add	r24, r16
    14ba:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
    14be:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0xFF);
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d2 );
    14c6:	8d 2f       	mov	r24, r29
    14c8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <LCD_eight_line+0xa6>
			}
			else{
				uint8_t d3 = decimal_shift(read5);
    14ce:	80 2f       	mov	r24, r16
    14d0:	0e 94 98 04 	call	0x930	; 0x930 <decimal_shift>
				LCD_Write_Character(0x00 | d3);
    14d4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
			
			//}
			
		}
		
		for(y=0;y<2;y++){
    14d8:	cf 5f       	subi	r28, 0xFF	; 255
    14da:	c2 30       	cpi	r28, 0x02	; 2
    14dc:	10 f3       	brcs	.-60     	; 0x14a2 <LCD_eight_line+0x70>
    14de:	ce e0       	ldi	r28, 0x0E	; 14
    14e0:	1f c0       	rjmp	.+62     	; 0x1520 <LCD_eight_line+0xee>
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){
			LCD_Write_Command(0x80 | y);
    14e2:	8c 2f       	mov	r24, r28
    14e4:	80 68       	ori	r24, 0x80	; 128
    14e6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Command(0x88 | 7);
    14ea:	8f e8       	ldi	r24, 0x8F	; 143
    14ec:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			if(read5>7){
    14f0:	08 30       	cpi	r16, 0x08	; 8
    14f2:	11 05       	cpc	r17, r1
    14f4:	60 f0       	brcs	.+24     	; 0x150e <LCD_eight_line+0xdc>
				uint8_t d8 =read5-8;
				uint8_t d9 = decimal_shift_back(d8);
    14f6:	88 ef       	ldi	r24, 0xF8	; 248
    14f8:	80 0f       	add	r24, r16
    14fa:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
    14fe:	d8 2f       	mov	r29, r24
				LCD_Write_Character(0x00);
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0x00 | d9 );
    1506:	8d 2f       	mov	r24, r29
    1508:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
    150c:	08 c0       	rjmp	.+16     	; 0x151e <LCD_eight_line+0xec>
			}
			else{
				uint8_t d10 = decimal_shift_back(read5);
    150e:	80 2f       	mov	r24, r16
    1510:	0e 94 b4 04 	call	0x968	; 0x968 <decimal_shift_back>
				LCD_Write_Character(0x00 | d10);
    1514:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				uint8_t d3 = decimal_shift(read5);
				LCD_Write_Character(0x00 | d3);
			}
		}
		
		for(y=14;y<16;y++){
    151e:	cf 5f       	subi	r28, 0xFF	; 255
    1520:	c0 31       	cpi	r28, 0x10	; 16
    1522:	f8 f2       	brcs	.-66     	; 0x14e2 <LCD_eight_line+0xb0>
				LCD_Write_Character(0x00 | d10);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<49){
    1524:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    1528:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    152c:	c1 97       	sbiw	r24, 0x31	; 49
    152e:	80 f0       	brcs	.+32     	; 0x1550 <LCD_eight_line+0x11e>
    1530:	12 c0       	rjmp	.+36     	; 0x1556 <LCD_eight_line+0x124>
			for(y=14;y<16;y++){
				LCD_Write_Command(0x80 | y);
    1532:	8c 2f       	mov	r24, r28
    1534:	80 68       	ori	r24, 0x80	; 128
    1536:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 7);
    153a:	8f e8       	ldi	r24, 0x8F	; 143
    153c:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2<49){
			for(y=14;y<16;y++){
    154c:	cf 5f       	subi	r28, 0xFF	; 255
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <LCD_eight_line+0x120>
    1550:	ce e0       	ldi	r28, 0x0E	; 14
    1552:	c0 31       	cpi	r28, 0x10	; 16
    1554:	70 f3       	brcs	.-36     	; 0x1532 <LCD_eight_line+0x100>
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>48){
    1556:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    155a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    155e:	c1 97       	sbiw	r24, 0x31	; 49
    1560:	80 f4       	brcc	.+32     	; 0x1582 <LCD_eight_line+0x150>
    1562:	12 c0       	rjmp	.+36     	; 0x1588 <LCD_eight_line+0x156>
			for(y=0;y<2;y++){
				LCD_Write_Command(0x80 | y);
    1564:	8c 2f       	mov	r24, r28
    1566:	80 68       	ori	r24, 0x80	; 128
    1568:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Command(0x88 | 6);
    156c:	8e e8       	ldi	r24, 0x8E	; 142
    156e:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
				LCD_Write_Character(0xFF);
    1572:	8f ef       	ldi	r24, 0xFF	; 255
    1574:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
    1578:	8f ef       	ldi	r24, 0xFF	; 255
    157a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_Write_Character>
				LCD_Write_Character(0xFF);
			}
		}
		
		if(read2>48){
			for(y=0;y<2;y++){
    157e:	cf 5f       	subi	r28, 0xFF	; 255
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <LCD_eight_line+0x152>
    1582:	c0 e0       	ldi	r28, 0x00	; 0
    1584:	c2 30       	cpi	r28, 0x02	; 2
    1586:	70 f3       	brcs	.-36     	; 0x1564 <LCD_eight_line+0x132>
				LCD_Write_Character(0xFF);
				LCD_Write_Character(0xFF);
			}
		}
		
		LCD_Write_Command(0x30);
    1588:	80 e3       	ldi	r24, 0x30	; 48
    158a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
		//read=0;
	}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	08 95       	ret

00001598 <forth_section>:
	uint16_t m2 = read2 - 32;
	LCD_third_line(m2);
	LCD_seventh_line(m2);
}

void forth_section(void){
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
	uint16_t m3 = read2 - 48;
    159c:	c0 91 8a 00 	lds	r28, 0x008A	; 0x80008a <__data_end>
    15a0:	d0 91 8b 00 	lds	r29, 0x008B	; 0x80008b <__data_end+0x1>
    15a4:	e0 97       	sbiw	r28, 0x30	; 48
	LCD_forth_line(m3);
    15a6:	ce 01       	movw	r24, r28
    15a8:	0e 94 15 07 	call	0xe2a	; 0xe2a <LCD_forth_line>
	LCD_eight_line (m3);
    15ac:	ce 01       	movw	r24, r28
    15ae:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_eight_line>
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <main>:


int main(void)
{

	FAST_PWM_intialization(FAST_From_prescaler1024);
    15b8:	85 e0       	ldi	r24, 0x05	; 5
    15ba:	0e 94 66 02 	call	0x4cc	; 0x4cc <FAST_PWM_intialization>
	LED0_Initialize();
    15be:	0e 94 af 03 	call	0x75e	; 0x75e <LED0_Initialize>
	LCD_Initialize();
    15c2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_Initialize>
	LCD_ClearScreen();
    15c6:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_ClearScreen>
	ADC_Initialization(AVCC,ADC_PRE128);
    15ca:	67 e0       	ldi	r22, 0x07	; 7
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_Initialization>
	uint16_t read=0;
	
	
	//Set graphical mode ON
	LCD_Write_Command(0x34);
    15d2:	84 e3       	ldi	r24, 0x34	; 52
    15d4:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
    15d8:	2f ef       	ldi	r18, 0xFF	; 255
    15da:	81 ee       	ldi	r24, 0xE1	; 225
    15dc:	94 e0       	ldi	r25, 0x04	; 4
    15de:	21 50       	subi	r18, 0x01	; 1
    15e0:	80 40       	sbci	r24, 0x00	; 0
    15e2:	90 40       	sbci	r25, 0x00	; 0
    15e4:	e1 f7       	brne	.-8      	; 0x15de <main+0x26>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <main+0x30>
    15e8:	00 00       	nop
	_delay_ms(100);
	LCD_Write_Command(0x36);
    15ea:	86 e3       	ldi	r24, 0x36	; 54
    15ec:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
    15f0:	2f ef       	ldi	r18, 0xFF	; 255
    15f2:	89 e6       	ldi	r24, 0x69	; 105
    15f4:	98 e1       	ldi	r25, 0x18	; 24
    15f6:	21 50       	subi	r18, 0x01	; 1
    15f8:	80 40       	sbci	r24, 0x00	; 0
    15fa:	90 40       	sbci	r25, 0x00	; 0
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <main+0x3e>
    15fe:	00 c0       	rjmp	.+0      	; 0x1600 <main+0x48>
    1600:	00 00       	nop
	_delay_ms(500);

	//CLEAR SCREEN from pervious data display
	CLEAR_SCREEN();
    1602:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CLEAR_SCREEN>


	main_lines();  //draw the main lines of PWM time cycle on graphical lcd
    1606:	0e 94 1e 04 	call	0x83c	; 0x83c <main_lines>
    160a:	2f ef       	ldi	r18, 0xFF	; 255
    160c:	89 ef       	ldi	r24, 0xF9	; 249
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	21 50       	subi	r18, 0x01	; 1
    1612:	80 40       	sbci	r24, 0x00	; 0
    1614:	90 40       	sbci	r25, 0x00	; 0
    1616:	e1 f7       	brne	.-8      	; 0x1610 <main+0x58>
    1618:	00 c0       	rjmp	.+0      	; 0x161a <main+0x62>
    161a:	00 00       	nop

	_delay_ms(20);

	data_display(); //graphical mode off and display main date on LCD (frequency, duty cycle and time)
    161c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <data_display>

	while (1)
	{
		read = ADC_Read(ADC_CH1);  //read from ADC (the POT value)
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <ADC_Read>
    1626:	ec 01       	movw	r28, r24
		
		pwm_for_led(read); //change duty cycle due to read from POT
    1628:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <pwm_for_led>
		
		
		read = read/(float)10.24;   // read = read * (100/1024) to change range from 0-100;
    162c:	be 01       	movw	r22, r28
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__floatunsisf>
    1636:	2a e0       	ldi	r18, 0x0A	; 10
    1638:	37 ed       	ldi	r19, 0xD7	; 215
    163a:	43 e2       	ldi	r20, 0x23	; 35
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__divsf3>
    1642:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fixunssfsi>
    1646:	6b 01       	movw	r12, r22
    1648:	7c 01       	movw	r14, r24
		
		if(read !=0){
    164a:	67 2b       	or	r22, r23
    164c:	c1 f1       	breq	.+112    	; 0x16be <main+0x106>
			LCD_Write_Command(0x96); //go to location on LCD (page2 with shift by 6 blocks)
    164e:	86 e9       	ldi	r24, 0x96	; 150
    1650:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			LCD_Write_Number(read);  // display read value as a duty cycle percent
    1654:	e1 2c       	mov	r14, r1
    1656:	f1 2c       	mov	r15, r1
    1658:	c7 01       	movw	r24, r14
    165a:	b6 01       	movw	r22, r12
    165c:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_Write_Number>
			read2 = read*(float)0.64;
    1660:	c7 01       	movw	r24, r14
    1662:	b6 01       	movw	r22, r12
    1664:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__floatunsisf>
    1668:	2a e0       	ldi	r18, 0x0A	; 10
    166a:	37 ed       	ldi	r19, 0xD7	; 215
    166c:	43 e2       	ldi	r20, 0x23	; 35
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 98 0c 	call	0x1930	; 0x1930 <__mulsf3>
    1674:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fixunssfsi>
    1678:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__data_end+0x1>
    167c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__data_end>
			
			LCD_Write_Command(0x36);  //graphical mode On again to draw
    1680:	86 e3       	ldi	r24, 0x36	; 54
    1682:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_Write_Command>
			
			fixed_vertival_lines();  //to draw the boundary lines for PWM wave shape
    1686:	0e 94 b5 03 	call	0x76a	; 0x76a <fixed_vertival_lines>
			
			first_section();  //for draw the first block at line 3 with changing by POT
    168a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <first_section>
			
			if(read2 >= 16)  //to draw the second block when duty cycle >= 25%
    168e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    1692:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    1696:	40 97       	sbiw	r24, 0x10	; 16
    1698:	10 f0       	brcs	.+4      	; 0x169e <main+0xe6>
			second_section();
    169a:	0e 94 26 09 	call	0x124c	; 0x124c <second_section>
			
			if(read2 >= 32)  //to draw the third block when duty cycle >= 50%
    169e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    16a2:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    16a6:	80 97       	sbiw	r24, 0x20	; 32
    16a8:	10 f0       	brcs	.+4      	; 0x16ae <main+0xf6>
			third_section();
    16aa:	0e 94 09 0a 	call	0x1412	; 0x1412 <third_section>
			
			if(read2 >= 48)  //to draw the forth block when duty cycle >= 75%
    16ae:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
    16b2:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
    16b6:	c0 97       	sbiw	r24, 0x30	; 48
    16b8:	10 f0       	brcs	.+4      	; 0x16be <main+0x106>
			forth_section();
    16ba:	0e 94 cc 0a 	call	0x1598	; 0x1598 <forth_section>
    16be:	2f ef       	ldi	r18, 0xFF	; 255
    16c0:	89 ef       	ldi	r24, 0xF9	; 249
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	21 50       	subi	r18, 0x01	; 1
    16c6:	80 40       	sbci	r24, 0x00	; 0
    16c8:	90 40       	sbci	r25, 0x00	; 0
    16ca:	e1 f7       	brne	.-8      	; 0x16c4 <main+0x10c>
    16cc:	00 c0       	rjmp	.+0      	; 0x16ce <main+0x116>
    16ce:	00 00       	nop
    16d0:	a7 cf       	rjmp	.-178    	; 0x1620 <main+0x68>

000016d2 <__divsf3>:
    16d2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__divsf3x>
    16d6:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__fp_round>
    16da:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__fp_pscB>
    16de:	58 f0       	brcs	.+22     	; 0x16f6 <__divsf3+0x24>
    16e0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fp_pscA>
    16e4:	40 f0       	brcs	.+16     	; 0x16f6 <__divsf3+0x24>
    16e6:	29 f4       	brne	.+10     	; 0x16f2 <__divsf3+0x20>
    16e8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <__divsf3+0x24>
    16ec:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_inf>
    16f0:	51 11       	cpse	r21, r1
    16f2:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__fp_szero>
    16f6:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__fp_nan>

000016fa <__divsf3x>:
    16fa:	0e 94 6f 0c 	call	0x18de	; 0x18de <__fp_split3>
    16fe:	68 f3       	brcs	.-38     	; 0x16da <__divsf3+0x8>

00001700 <__divsf3_pse>:
    1700:	99 23       	and	r25, r25
    1702:	b1 f3       	breq	.-20     	; 0x16f0 <__divsf3+0x1e>
    1704:	55 23       	and	r21, r21
    1706:	91 f3       	breq	.-28     	; 0x16ec <__divsf3+0x1a>
    1708:	95 1b       	sub	r25, r21
    170a:	55 0b       	sbc	r21, r21
    170c:	bb 27       	eor	r27, r27
    170e:	aa 27       	eor	r26, r26
    1710:	62 17       	cp	r22, r18
    1712:	73 07       	cpc	r23, r19
    1714:	84 07       	cpc	r24, r20
    1716:	38 f0       	brcs	.+14     	; 0x1726 <__divsf3_pse+0x26>
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	5f 4f       	sbci	r21, 0xFF	; 255
    171c:	22 0f       	add	r18, r18
    171e:	33 1f       	adc	r19, r19
    1720:	44 1f       	adc	r20, r20
    1722:	aa 1f       	adc	r26, r26
    1724:	a9 f3       	breq	.-22     	; 0x1710 <__divsf3_pse+0x10>
    1726:	35 d0       	rcall	.+106    	; 0x1792 <__divsf3_pse+0x92>
    1728:	0e 2e       	mov	r0, r30
    172a:	3a f0       	brmi	.+14     	; 0x173a <__divsf3_pse+0x3a>
    172c:	e0 e8       	ldi	r30, 0x80	; 128
    172e:	32 d0       	rcall	.+100    	; 0x1794 <__divsf3_pse+0x94>
    1730:	91 50       	subi	r25, 0x01	; 1
    1732:	50 40       	sbci	r21, 0x00	; 0
    1734:	e6 95       	lsr	r30
    1736:	00 1c       	adc	r0, r0
    1738:	ca f7       	brpl	.-14     	; 0x172c <__divsf3_pse+0x2c>
    173a:	2b d0       	rcall	.+86     	; 0x1792 <__divsf3_pse+0x92>
    173c:	fe 2f       	mov	r31, r30
    173e:	29 d0       	rcall	.+82     	; 0x1792 <__divsf3_pse+0x92>
    1740:	66 0f       	add	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	88 1f       	adc	r24, r24
    1746:	bb 1f       	adc	r27, r27
    1748:	26 17       	cp	r18, r22
    174a:	37 07       	cpc	r19, r23
    174c:	48 07       	cpc	r20, r24
    174e:	ab 07       	cpc	r26, r27
    1750:	b0 e8       	ldi	r27, 0x80	; 128
    1752:	09 f0       	breq	.+2      	; 0x1756 <__divsf3_pse+0x56>
    1754:	bb 0b       	sbc	r27, r27
    1756:	80 2d       	mov	r24, r0
    1758:	bf 01       	movw	r22, r30
    175a:	ff 27       	eor	r31, r31
    175c:	93 58       	subi	r25, 0x83	; 131
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	3a f0       	brmi	.+14     	; 0x1770 <__divsf3_pse+0x70>
    1762:	9e 3f       	cpi	r25, 0xFE	; 254
    1764:	51 05       	cpc	r21, r1
    1766:	78 f0       	brcs	.+30     	; 0x1786 <__divsf3_pse+0x86>
    1768:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_inf>
    176c:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__fp_szero>
    1770:	5f 3f       	cpi	r21, 0xFF	; 255
    1772:	e4 f3       	brlt	.-8      	; 0x176c <__divsf3_pse+0x6c>
    1774:	98 3e       	cpi	r25, 0xE8	; 232
    1776:	d4 f3       	brlt	.-12     	; 0x176c <__divsf3_pse+0x6c>
    1778:	86 95       	lsr	r24
    177a:	77 95       	ror	r23
    177c:	67 95       	ror	r22
    177e:	b7 95       	ror	r27
    1780:	f7 95       	ror	r31
    1782:	9f 5f       	subi	r25, 0xFF	; 255
    1784:	c9 f7       	brne	.-14     	; 0x1778 <__divsf3_pse+0x78>
    1786:	88 0f       	add	r24, r24
    1788:	91 1d       	adc	r25, r1
    178a:	96 95       	lsr	r25
    178c:	87 95       	ror	r24
    178e:	97 f9       	bld	r25, 7
    1790:	08 95       	ret
    1792:	e1 e0       	ldi	r30, 0x01	; 1
    1794:	66 0f       	add	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	bb 1f       	adc	r27, r27
    179c:	62 17       	cp	r22, r18
    179e:	73 07       	cpc	r23, r19
    17a0:	84 07       	cpc	r24, r20
    17a2:	ba 07       	cpc	r27, r26
    17a4:	20 f0       	brcs	.+8      	; 0x17ae <__divsf3_pse+0xae>
    17a6:	62 1b       	sub	r22, r18
    17a8:	73 0b       	sbc	r23, r19
    17aa:	84 0b       	sbc	r24, r20
    17ac:	ba 0b       	sbc	r27, r26
    17ae:	ee 1f       	adc	r30, r30
    17b0:	88 f7       	brcc	.-30     	; 0x1794 <__divsf3_pse+0x94>
    17b2:	e0 95       	com	r30
    17b4:	08 95       	ret

000017b6 <__fixunssfsi>:
    17b6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_splitA>
    17ba:	88 f0       	brcs	.+34     	; 0x17de <__fixunssfsi+0x28>
    17bc:	9f 57       	subi	r25, 0x7F	; 127
    17be:	98 f0       	brcs	.+38     	; 0x17e6 <__fixunssfsi+0x30>
    17c0:	b9 2f       	mov	r27, r25
    17c2:	99 27       	eor	r25, r25
    17c4:	b7 51       	subi	r27, 0x17	; 23
    17c6:	b0 f0       	brcs	.+44     	; 0x17f4 <__fixunssfsi+0x3e>
    17c8:	e1 f0       	breq	.+56     	; 0x1802 <__fixunssfsi+0x4c>
    17ca:	66 0f       	add	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	1a f0       	brmi	.+6      	; 0x17da <__fixunssfsi+0x24>
    17d4:	ba 95       	dec	r27
    17d6:	c9 f7       	brne	.-14     	; 0x17ca <__fixunssfsi+0x14>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <__fixunssfsi+0x4c>
    17da:	b1 30       	cpi	r27, 0x01	; 1
    17dc:	91 f0       	breq	.+36     	; 0x1802 <__fixunssfsi+0x4c>
    17de:	0e 94 91 0c 	call	0x1922	; 0x1922 <__fp_zero>
    17e2:	b1 e0       	ldi	r27, 0x01	; 1
    17e4:	08 95       	ret
    17e6:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__fp_zero>
    17ea:	67 2f       	mov	r22, r23
    17ec:	78 2f       	mov	r23, r24
    17ee:	88 27       	eor	r24, r24
    17f0:	b8 5f       	subi	r27, 0xF8	; 248
    17f2:	39 f0       	breq	.+14     	; 0x1802 <__fixunssfsi+0x4c>
    17f4:	b9 3f       	cpi	r27, 0xF9	; 249
    17f6:	cc f3       	brlt	.-14     	; 0x17ea <__fixunssfsi+0x34>
    17f8:	86 95       	lsr	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	b3 95       	inc	r27
    1800:	d9 f7       	brne	.-10     	; 0x17f8 <__fixunssfsi+0x42>
    1802:	3e f4       	brtc	.+14     	; 0x1812 <__fixunssfsi+0x5c>
    1804:	90 95       	com	r25
    1806:	80 95       	com	r24
    1808:	70 95       	com	r23
    180a:	61 95       	neg	r22
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	8f 4f       	sbci	r24, 0xFF	; 255
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	08 95       	ret

00001814 <__floatunsisf>:
    1814:	e8 94       	clt
    1816:	09 c0       	rjmp	.+18     	; 0x182a <__floatsisf+0x12>

00001818 <__floatsisf>:
    1818:	97 fb       	bst	r25, 7
    181a:	3e f4       	brtc	.+14     	; 0x182a <__floatsisf+0x12>
    181c:	90 95       	com	r25
    181e:	80 95       	com	r24
    1820:	70 95       	com	r23
    1822:	61 95       	neg	r22
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	8f 4f       	sbci	r24, 0xFF	; 255
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	99 23       	and	r25, r25
    182c:	a9 f0       	breq	.+42     	; 0x1858 <__floatsisf+0x40>
    182e:	f9 2f       	mov	r31, r25
    1830:	96 e9       	ldi	r25, 0x96	; 150
    1832:	bb 27       	eor	r27, r27
    1834:	93 95       	inc	r25
    1836:	f6 95       	lsr	r31
    1838:	87 95       	ror	r24
    183a:	77 95       	ror	r23
    183c:	67 95       	ror	r22
    183e:	b7 95       	ror	r27
    1840:	f1 11       	cpse	r31, r1
    1842:	f8 cf       	rjmp	.-16     	; 0x1834 <__floatsisf+0x1c>
    1844:	fa f4       	brpl	.+62     	; 0x1884 <__floatsisf+0x6c>
    1846:	bb 0f       	add	r27, r27
    1848:	11 f4       	brne	.+4      	; 0x184e <__floatsisf+0x36>
    184a:	60 ff       	sbrs	r22, 0
    184c:	1b c0       	rjmp	.+54     	; 0x1884 <__floatsisf+0x6c>
    184e:	6f 5f       	subi	r22, 0xFF	; 255
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	8f 4f       	sbci	r24, 0xFF	; 255
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	16 c0       	rjmp	.+44     	; 0x1884 <__floatsisf+0x6c>
    1858:	88 23       	and	r24, r24
    185a:	11 f0       	breq	.+4      	; 0x1860 <__floatsisf+0x48>
    185c:	96 e9       	ldi	r25, 0x96	; 150
    185e:	11 c0       	rjmp	.+34     	; 0x1882 <__floatsisf+0x6a>
    1860:	77 23       	and	r23, r23
    1862:	21 f0       	breq	.+8      	; 0x186c <__floatsisf+0x54>
    1864:	9e e8       	ldi	r25, 0x8E	; 142
    1866:	87 2f       	mov	r24, r23
    1868:	76 2f       	mov	r23, r22
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <__floatsisf+0x5e>
    186c:	66 23       	and	r22, r22
    186e:	71 f0       	breq	.+28     	; 0x188c <__floatsisf+0x74>
    1870:	96 e8       	ldi	r25, 0x86	; 134
    1872:	86 2f       	mov	r24, r22
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	2a f0       	brmi	.+10     	; 0x1884 <__floatsisf+0x6c>
    187a:	9a 95       	dec	r25
    187c:	66 0f       	add	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	88 1f       	adc	r24, r24
    1882:	da f7       	brpl	.-10     	; 0x187a <__floatsisf+0x62>
    1884:	88 0f       	add	r24, r24
    1886:	96 95       	lsr	r25
    1888:	87 95       	ror	r24
    188a:	97 f9       	bld	r25, 7
    188c:	08 95       	ret

0000188e <__fp_inf>:
    188e:	97 f9       	bld	r25, 7
    1890:	9f 67       	ori	r25, 0x7F	; 127
    1892:	80 e8       	ldi	r24, 0x80	; 128
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	08 95       	ret

0000189a <__fp_nan>:
    189a:	9f ef       	ldi	r25, 0xFF	; 255
    189c:	80 ec       	ldi	r24, 0xC0	; 192
    189e:	08 95       	ret

000018a0 <__fp_pscA>:
    18a0:	00 24       	eor	r0, r0
    18a2:	0a 94       	dec	r0
    18a4:	16 16       	cp	r1, r22
    18a6:	17 06       	cpc	r1, r23
    18a8:	18 06       	cpc	r1, r24
    18aa:	09 06       	cpc	r0, r25
    18ac:	08 95       	ret

000018ae <__fp_pscB>:
    18ae:	00 24       	eor	r0, r0
    18b0:	0a 94       	dec	r0
    18b2:	12 16       	cp	r1, r18
    18b4:	13 06       	cpc	r1, r19
    18b6:	14 06       	cpc	r1, r20
    18b8:	05 06       	cpc	r0, r21
    18ba:	08 95       	ret

000018bc <__fp_round>:
    18bc:	09 2e       	mov	r0, r25
    18be:	03 94       	inc	r0
    18c0:	00 0c       	add	r0, r0
    18c2:	11 f4       	brne	.+4      	; 0x18c8 <__fp_round+0xc>
    18c4:	88 23       	and	r24, r24
    18c6:	52 f0       	brmi	.+20     	; 0x18dc <__fp_round+0x20>
    18c8:	bb 0f       	add	r27, r27
    18ca:	40 f4       	brcc	.+16     	; 0x18dc <__fp_round+0x20>
    18cc:	bf 2b       	or	r27, r31
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <__fp_round+0x18>
    18d0:	60 ff       	sbrs	r22, 0
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <__fp_round+0x20>
    18d4:	6f 5f       	subi	r22, 0xFF	; 255
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	08 95       	ret

000018de <__fp_split3>:
    18de:	57 fd       	sbrc	r21, 7
    18e0:	90 58       	subi	r25, 0x80	; 128
    18e2:	44 0f       	add	r20, r20
    18e4:	55 1f       	adc	r21, r21
    18e6:	59 f0       	breq	.+22     	; 0x18fe <__fp_splitA+0x10>
    18e8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ea:	71 f0       	breq	.+28     	; 0x1908 <__fp_splitA+0x1a>
    18ec:	47 95       	ror	r20

000018ee <__fp_splitA>:
    18ee:	88 0f       	add	r24, r24
    18f0:	97 fb       	bst	r25, 7
    18f2:	99 1f       	adc	r25, r25
    18f4:	61 f0       	breq	.+24     	; 0x190e <__fp_splitA+0x20>
    18f6:	9f 3f       	cpi	r25, 0xFF	; 255
    18f8:	79 f0       	breq	.+30     	; 0x1918 <__fp_splitA+0x2a>
    18fa:	87 95       	ror	r24
    18fc:	08 95       	ret
    18fe:	12 16       	cp	r1, r18
    1900:	13 06       	cpc	r1, r19
    1902:	14 06       	cpc	r1, r20
    1904:	55 1f       	adc	r21, r21
    1906:	f2 cf       	rjmp	.-28     	; 0x18ec <__fp_split3+0xe>
    1908:	46 95       	lsr	r20
    190a:	f1 df       	rcall	.-30     	; 0x18ee <__fp_splitA>
    190c:	08 c0       	rjmp	.+16     	; 0x191e <__fp_splitA+0x30>
    190e:	16 16       	cp	r1, r22
    1910:	17 06       	cpc	r1, r23
    1912:	18 06       	cpc	r1, r24
    1914:	99 1f       	adc	r25, r25
    1916:	f1 cf       	rjmp	.-30     	; 0x18fa <__fp_splitA+0xc>
    1918:	86 95       	lsr	r24
    191a:	71 05       	cpc	r23, r1
    191c:	61 05       	cpc	r22, r1
    191e:	08 94       	sec
    1920:	08 95       	ret

00001922 <__fp_zero>:
    1922:	e8 94       	clt

00001924 <__fp_szero>:
    1924:	bb 27       	eor	r27, r27
    1926:	66 27       	eor	r22, r22
    1928:	77 27       	eor	r23, r23
    192a:	cb 01       	movw	r24, r22
    192c:	97 f9       	bld	r25, 7
    192e:	08 95       	ret

00001930 <__mulsf3>:
    1930:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__mulsf3x>
    1934:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__fp_round>
    1938:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fp_pscA>
    193c:	38 f0       	brcs	.+14     	; 0x194c <__mulsf3+0x1c>
    193e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__fp_pscB>
    1942:	20 f0       	brcs	.+8      	; 0x194c <__mulsf3+0x1c>
    1944:	95 23       	and	r25, r21
    1946:	11 f0       	breq	.+4      	; 0x194c <__mulsf3+0x1c>
    1948:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_inf>
    194c:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__fp_nan>
    1950:	11 24       	eor	r1, r1
    1952:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__fp_szero>

00001956 <__mulsf3x>:
    1956:	0e 94 6f 0c 	call	0x18de	; 0x18de <__fp_split3>
    195a:	70 f3       	brcs	.-36     	; 0x1938 <__mulsf3+0x8>

0000195c <__mulsf3_pse>:
    195c:	95 9f       	mul	r25, r21
    195e:	c1 f3       	breq	.-16     	; 0x1950 <__mulsf3+0x20>
    1960:	95 0f       	add	r25, r21
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	55 1f       	adc	r21, r21
    1966:	62 9f       	mul	r22, r18
    1968:	f0 01       	movw	r30, r0
    196a:	72 9f       	mul	r23, r18
    196c:	bb 27       	eor	r27, r27
    196e:	f0 0d       	add	r31, r0
    1970:	b1 1d       	adc	r27, r1
    1972:	63 9f       	mul	r22, r19
    1974:	aa 27       	eor	r26, r26
    1976:	f0 0d       	add	r31, r0
    1978:	b1 1d       	adc	r27, r1
    197a:	aa 1f       	adc	r26, r26
    197c:	64 9f       	mul	r22, r20
    197e:	66 27       	eor	r22, r22
    1980:	b0 0d       	add	r27, r0
    1982:	a1 1d       	adc	r26, r1
    1984:	66 1f       	adc	r22, r22
    1986:	82 9f       	mul	r24, r18
    1988:	22 27       	eor	r18, r18
    198a:	b0 0d       	add	r27, r0
    198c:	a1 1d       	adc	r26, r1
    198e:	62 1f       	adc	r22, r18
    1990:	73 9f       	mul	r23, r19
    1992:	b0 0d       	add	r27, r0
    1994:	a1 1d       	adc	r26, r1
    1996:	62 1f       	adc	r22, r18
    1998:	83 9f       	mul	r24, r19
    199a:	a0 0d       	add	r26, r0
    199c:	61 1d       	adc	r22, r1
    199e:	22 1f       	adc	r18, r18
    19a0:	74 9f       	mul	r23, r20
    19a2:	33 27       	eor	r19, r19
    19a4:	a0 0d       	add	r26, r0
    19a6:	61 1d       	adc	r22, r1
    19a8:	23 1f       	adc	r18, r19
    19aa:	84 9f       	mul	r24, r20
    19ac:	60 0d       	add	r22, r0
    19ae:	21 1d       	adc	r18, r1
    19b0:	82 2f       	mov	r24, r18
    19b2:	76 2f       	mov	r23, r22
    19b4:	6a 2f       	mov	r22, r26
    19b6:	11 24       	eor	r1, r1
    19b8:	9f 57       	subi	r25, 0x7F	; 127
    19ba:	50 40       	sbci	r21, 0x00	; 0
    19bc:	9a f0       	brmi	.+38     	; 0x19e4 <__mulsf3_pse+0x88>
    19be:	f1 f0       	breq	.+60     	; 0x19fc <__mulsf3_pse+0xa0>
    19c0:	88 23       	and	r24, r24
    19c2:	4a f0       	brmi	.+18     	; 0x19d6 <__mulsf3_pse+0x7a>
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	bb 1f       	adc	r27, r27
    19ca:	66 1f       	adc	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	88 1f       	adc	r24, r24
    19d0:	91 50       	subi	r25, 0x01	; 1
    19d2:	50 40       	sbci	r21, 0x00	; 0
    19d4:	a9 f7       	brne	.-22     	; 0x19c0 <__mulsf3_pse+0x64>
    19d6:	9e 3f       	cpi	r25, 0xFE	; 254
    19d8:	51 05       	cpc	r21, r1
    19da:	80 f0       	brcs	.+32     	; 0x19fc <__mulsf3_pse+0xa0>
    19dc:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__fp_inf>
    19e0:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__fp_szero>
    19e4:	5f 3f       	cpi	r21, 0xFF	; 255
    19e6:	e4 f3       	brlt	.-8      	; 0x19e0 <__mulsf3_pse+0x84>
    19e8:	98 3e       	cpi	r25, 0xE8	; 232
    19ea:	d4 f3       	brlt	.-12     	; 0x19e0 <__mulsf3_pse+0x84>
    19ec:	86 95       	lsr	r24
    19ee:	77 95       	ror	r23
    19f0:	67 95       	ror	r22
    19f2:	b7 95       	ror	r27
    19f4:	f7 95       	ror	r31
    19f6:	e7 95       	ror	r30
    19f8:	9f 5f       	subi	r25, 0xFF	; 255
    19fa:	c1 f7       	brne	.-16     	; 0x19ec <__mulsf3_pse+0x90>
    19fc:	fe 2b       	or	r31, r30
    19fe:	88 0f       	add	r24, r24
    1a00:	91 1d       	adc	r25, r1
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	97 f9       	bld	r25, 7
    1a08:	08 95       	ret

00001a0a <__tablejump2__>:
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	05 90       	lpm	r0, Z+
    1a10:	f4 91       	lpm	r31, Z
    1a12:	e0 2d       	mov	r30, r0
    1a14:	09 94       	ijmp

00001a16 <__ltoa_ncheck>:
    1a16:	bb 27       	eor	r27, r27
    1a18:	2a 30       	cpi	r18, 0x0A	; 10
    1a1a:	51 f4       	brne	.+20     	; 0x1a30 <__ltoa_ncheck+0x1a>
    1a1c:	99 23       	and	r25, r25
    1a1e:	42 f4       	brpl	.+16     	; 0x1a30 <__ltoa_ncheck+0x1a>
    1a20:	bd e2       	ldi	r27, 0x2D	; 45
    1a22:	90 95       	com	r25
    1a24:	80 95       	com	r24
    1a26:	70 95       	com	r23
    1a28:	61 95       	neg	r22
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__ultoa_common>

00001a34 <__ultoa_ncheck>:
    1a34:	bb 27       	eor	r27, r27

00001a36 <__ultoa_common>:
    1a36:	fa 01       	movw	r30, r20
    1a38:	a6 2f       	mov	r26, r22
    1a3a:	62 17       	cp	r22, r18
    1a3c:	71 05       	cpc	r23, r1
    1a3e:	81 05       	cpc	r24, r1
    1a40:	91 05       	cpc	r25, r1
    1a42:	33 0b       	sbc	r19, r19
    1a44:	30 fb       	bst	r19, 0
    1a46:	66 f0       	brts	.+24     	; 0x1a60 <__ultoa_common+0x2a>
    1a48:	aa 27       	eor	r26, r26
    1a4a:	66 0f       	add	r22, r22
    1a4c:	77 1f       	adc	r23, r23
    1a4e:	88 1f       	adc	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	aa 1f       	adc	r26, r26
    1a54:	a2 17       	cp	r26, r18
    1a56:	10 f0       	brcs	.+4      	; 0x1a5c <__ultoa_common+0x26>
    1a58:	a2 1b       	sub	r26, r18
    1a5a:	63 95       	inc	r22
    1a5c:	38 50       	subi	r19, 0x08	; 8
    1a5e:	a9 f7       	brne	.-22     	; 0x1a4a <__ultoa_common+0x14>
    1a60:	a0 5d       	subi	r26, 0xD0	; 208
    1a62:	aa 33       	cpi	r26, 0x3A	; 58
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <__ultoa_common+0x32>
    1a66:	a9 5d       	subi	r26, 0xD9	; 217
    1a68:	a1 93       	st	Z+, r26
    1a6a:	36 f7       	brtc	.-52     	; 0x1a38 <__ultoa_common+0x2>
    1a6c:	b1 11       	cpse	r27, r1
    1a6e:	b1 93       	st	Z+, r27
    1a70:	10 82       	st	Z, r1
    1a72:	ca 01       	movw	r24, r20
    1a74:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <strrev>

00001a78 <strrev>:
    1a78:	dc 01       	movw	r26, r24
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	67 2f       	mov	r22, r23
    1a7e:	71 91       	ld	r23, Z+
    1a80:	77 23       	and	r23, r23
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <strrev+0x4>
    1a84:	32 97       	sbiw	r30, 0x02	; 2
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <strrev+0x18>
    1a88:	7c 91       	ld	r23, X
    1a8a:	6d 93       	st	X+, r22
    1a8c:	70 83       	st	Z, r23
    1a8e:	62 91       	ld	r22, -Z
    1a90:	ae 17       	cp	r26, r30
    1a92:	bf 07       	cpc	r27, r31
    1a94:	c8 f3       	brcs	.-14     	; 0x1a88 <strrev+0x10>
    1a96:	08 95       	ret

00001a98 <_exit>:
    1a98:	f8 94       	cli

00001a9a <__stop_program>:
    1a9a:	ff cf       	rjmp	.-2      	; 0x1a9a <__stop_program>
